{
  "openapi" : "3.1.0",
  "info" : {
    "contact" : {
      "email" : "arge@bladeco.com.tr",
      "name" : "Bladeco Arge",
      "url" : "https://bladeco.com.tr"
    },
    "title" : "Bladeco CPO API",
    "version" : "1.1.0-SNAPSHOT"
  },
  "tags" : [ {
    "name" : "Cdr"
  }, {
    "name" : "ChargingProfiles"
  }, {
    "name" : "Location"
  }, {
    "name" : "Logs"
  }, {
    "name" : "SelfService"
  }, {
    "name" : "Tariff"
  }, {
    "name" : "Token"
  }, {
    "name" : "Transaction"
  }, {
    "name" : "Wallet"
  } ],
  "components" : {
    "schemas" : {
      "AbstractProfileResult" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "$ref" : "#/components/schemas/ChargingProfileResultType"
          }
        }
      },
      "ActiveChargingProfile" : {
        "type" : "object",
        "required" : [ "start_date_time", "charging_profile" ],
        "properties" : {
          "start_date_time" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "charging_profile" : {
            "$ref" : "#/components/schemas/ChargingProfile"
          }
        }
      },
      "AdditionalGeoLocation" : {
        "type" : "object",
        "required" : [ "latitude", "longitude" ],
        "properties" : {
          "latitude" : {
            "type" : "string",
            "maxLength" : 10,
            "pattern" : "\\S"
          },
          "longitude" : {
            "type" : "string",
            "maxLength" : 11,
            "pattern" : "\\S"
          },
          "name" : {
            "$ref" : "#/components/schemas/DisplayText"
          }
        }
      },
      "AuthMethod" : {
        "type" : "string",
        "enum" : [ "AUTH_REQUEST", "COMMAND", "WHITELIST" ]
      },
      "AuthorizationData" : {
        "type" : "object",
        "properties" : {
          "idTag" : {
            "type" : "string"
          },
          "idTagInfo" : {
            "$ref" : "#/components/schemas/IdTagInfo"
          }
        }
      },
      "AuthorizationStatus" : {
        "type" : "string",
        "enum" : [ "Accepted", "Blocked", "Expired", "Invalid", "ConcurrentTx" ]
      },
      "AvailabilityStatus" : {
        "type" : "string",
        "enum" : [ "Accepted", "Rejected", "Scheduled" ]
      },
      "AvailabilityType" : {
        "type" : "string",
        "enum" : [ "Inoperative", "Operative" ]
      },
      "BusinessDetails" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "maxLength" : 100,
            "pattern" : "\\S"
          },
          "website" : {
            "type" : "string"
          },
          "logo" : {
            "$ref" : "#/components/schemas/Image"
          }
        }
      },
      "CDRDto" : {
        "type" : "object",
        "required" : [ "country_code", "party_id", "id", "last_updated", "start_date_time", "end_date_time", "cdr_token", "auth_method", "cdr_location", "currency", "charging_periods", "total_cost", "total_energy", "total_time" ],
        "properties" : {
          "country_code" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 2,
            "pattern" : "\\S"
          },
          "party_id" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 3,
            "pattern" : "\\S"
          },
          "id" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 36,
            "pattern" : "\\S"
          },
          "last_updated" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "start_date_time" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "end_date_time" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "session_id" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 36
          },
          "cdr_token" : {
            "$ref" : "#/components/schemas/CdrToken"
          },
          "auth_method" : {
            "$ref" : "#/components/schemas/AuthMethod"
          },
          "authorization_reference" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 36
          },
          "cdr_location" : {
            "$ref" : "#/components/schemas/CdrLocation"
          },
          "meter_id" : {
            "type" : "string"
          },
          "currency" : {
            "type" : "string",
            "maxLength" : 3,
            "pattern" : "\\S"
          },
          "tariffs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TariffDto"
            }
          },
          "charging_periods" : {
            "type" : "array",
            "minItems" : 1,
            "items" : {
              "$ref" : "#/components/schemas/ChargingPeriod"
            }
          },
          "signed_data" : {
            "$ref" : "#/components/schemas/SignedData"
          },
          "total_cost" : {
            "$ref" : "#/components/schemas/Price"
          },
          "total_fixed_cost" : {
            "$ref" : "#/components/schemas/Price"
          },
          "total_energy" : {
            "type" : "number",
            "format" : "float"
          },
          "total_energy_cost" : {
            "$ref" : "#/components/schemas/Price"
          },
          "total_time" : {
            "type" : "number",
            "format" : "float"
          },
          "total_time_cost" : {
            "$ref" : "#/components/schemas/Price"
          },
          "total_parking_time" : {
            "type" : "number",
            "format" : "float"
          },
          "total_parking_cost" : {
            "$ref" : "#/components/schemas/Price"
          },
          "total_reservation_cost" : {
            "$ref" : "#/components/schemas/Price"
          },
          "remark" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 255
          },
          "invoice_reference_id" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 39,
            "pattern" : "/[:ascii:]/i"
          },
          "credit" : {
            "type" : "boolean"
          },
          "credit_reference_id" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 39,
            "pattern" : "/[:ascii:]/i"
          },
          "home_charging_compensation" : {
            "type" : "boolean"
          }
        }
      },
      "CacheConnector" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "status" : {
            "type" : "string"
          },
          "transaction" : {
            "$ref" : "#/components/schemas/CacheTransaction"
          }
        }
      },
      "CacheEVSESession" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sessionId" : {
            "$ref" : "#/components/schemas/UUID"
          },
          "evseId" : {
            "type" : "string"
          },
          "timestampSessionStart" : {
            "$ref" : "#/components/schemas/ZonedDateTime"
          },
          "timestampSessionStop" : {
            "$ref" : "#/components/schemas/ZonedDateTime"
          },
          "connectors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CacheConnector"
            }
          },
          "timestampLastHeartbeat" : {
            "$ref" : "#/components/schemas/ZonedDateTime"
          }
        }
      },
      "CacheTransaction" : {
        "type" : "object",
        "properties" : {
          "transactionId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reservationId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "meterValues" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MeterValue"
            }
          }
        }
      },
      "CancelReservationConfirmation" : {
        "type" : "object",
        "xml" : {
          "name" : "cancelReservationResponse"
        },
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/CancelReservationStatus"
          }
        }
      },
      "CancelReservationRequest" : {
        "type" : "object",
        "properties" : {
          "ocppMessageId" : {
            "type" : "string"
          },
          "reservationId" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "CancelReservationStatus" : {
        "type" : "string",
        "enum" : [ "Accepted", "Rejected" ]
      },
      "Capability" : {
        "type" : "string",
        "enum" : [ "CHARGING_PROFILE_CAPABLE", "CHARGING_PREFERENCES_CAPABLE", "CHIP_CARD_SUPPORT", "CONTACTLESS_CARD_SUPPORT", "CREDIT_CARD_PAYABLE", "DEBIT_CARD_PAYABLE", "PED_TERMINAL", "REMOTE_START_STOP_CAPABLE", "RESERVABLE", "RFID_READER", "START_SESSION_CONNECTOR_REQUIRED", "TOKEN_GROUP_CAPABLE", "UNLOCK_CAPABLE" ]
      },
      "CdrDimension" : {
        "type" : "object",
        "required" : [ "type", "volume" ],
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/CdrDimensionType"
          },
          "volume" : {
            "type" : "number",
            "format" : "float",
            "pattern" : "^\\d{1,2147483647}([.]\\d{1,4})?$"
          }
        }
      },
      "CdrDimensionType" : {
        "type" : "string",
        "enum" : [ "CURRENT", "ENERGY", "ENERGY_EXPORT", "ENERGY_IMPORT", "MAX_CURRENT", "MIN_CURRENT", "MAX_POWER", "MIN_POWER", "PARKING_TIME", "POWER", "RESERVATION_TIME", "STATE_OF_CHARGE", "TIME" ]
      },
      "CdrLocation" : {
        "type" : "object",
        "required" : [ "id", "address", "city", "country", "coordinates", "evse_uid", "evse_id", "connector_id" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "maxLength" : 36,
            "pattern" : "\\S"
          },
          "name" : {
            "type" : "string",
            "maxLength" : 255
          },
          "address" : {
            "type" : "string",
            "maxLength" : 45,
            "pattern" : "\\S"
          },
          "city" : {
            "type" : "string",
            "maxLength" : 45,
            "pattern" : "\\S"
          },
          "postal_code" : {
            "type" : "string",
            "maxLength" : 10
          },
          "state" : {
            "type" : "string",
            "maxLength" : 20
          },
          "country" : {
            "type" : "string",
            "maxLength" : 3,
            "pattern" : "\\S"
          },
          "coordinates" : {
            "$ref" : "#/components/schemas/GeoLocation"
          },
          "evse_uid" : {
            "type" : "string",
            "maxLength" : 36,
            "pattern" : "\\S"
          },
          "evse_id" : {
            "type" : "string",
            "maxLength" : 48,
            "pattern" : "\\S"
          },
          "connector_id" : {
            "type" : "string",
            "maxLength" : 36,
            "pattern" : "\\S"
          },
          "connector_standard" : {
            "$ref" : "#/components/schemas/ConnectorType"
          },
          "connector_format" : {
            "$ref" : "#/components/schemas/ConnectorFormat"
          },
          "connector_power_type" : {
            "$ref" : "#/components/schemas/PowerType"
          }
        }
      },
      "CdrToken" : {
        "type" : "object",
        "required" : [ "country_code", "party_id", "uid", "type", "contract_id" ],
        "properties" : {
          "country_code" : {
            "type" : "string",
            "minLength" : 2,
            "maxLength" : 2,
            "pattern" : "\\S"
          },
          "party_id" : {
            "type" : "string",
            "minLength" : 3,
            "maxLength" : 3,
            "pattern" : "\\S"
          },
          "uid" : {
            "type" : "string",
            "maxLength" : 36,
            "pattern" : "\\S"
          },
          "type" : {
            "$ref" : "#/components/schemas/TokenType"
          },
          "contract_id" : {
            "type" : "string",
            "maxLength" : 36,
            "pattern" : "\\S"
          }
        }
      },
      "ChangeAvailabilityConfirmation" : {
        "type" : "object",
        "xml" : {
          "name" : "changeAvailabilityResponse"
        },
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/AvailabilityStatus"
          }
        }
      },
      "ChangeAvailabilityRequest" : {
        "type" : "object",
        "properties" : {
          "ocppMessageId" : {
            "type" : "string"
          },
          "connectorId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "$ref" : "#/components/schemas/AvailabilityType"
          }
        }
      },
      "ChangeConfigurationConfirmation" : {
        "type" : "object",
        "xml" : {
          "name" : "changeConfigurationResponse"
        },
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/ConfigurationStatus"
          }
        }
      },
      "ChangeConfigurationRequest" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          },
          "ocppMessageId" : {
            "type" : "string"
          }
        }
      },
      "ChargingPeriod" : {
        "type" : "object",
        "required" : [ "start_date_time", "dimensions" ],
        "properties" : {
          "start_date_time" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "dimensions" : {
            "type" : "array",
            "minItems" : 1,
            "items" : {
              "$ref" : "#/components/schemas/CdrDimension"
            }
          },
          "tariff_id" : {
            "type" : "string"
          }
        }
      },
      "ChargingProfile" : {
        "type" : "object",
        "required" : [ "charging_rate_unit" ],
        "properties" : {
          "start_date_time" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "duration" : {
            "type" : "integer",
            "format" : "int32"
          },
          "charging_rate_unit" : {
            "$ref" : "#/components/schemas/ChargingRateUnit"
          },
          "min_charging_rate" : {
            "type" : "number",
            "format" : "float",
            "pattern" : "^\\d{1,2147483647}([.]\\d{1,4})?$"
          },
          "charging_profile_period" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChargingProfilePeriod"
            }
          }
        }
      },
      "ChargingProfile1" : {
        "type" : "object",
        "properties" : {
          "chargingProfileId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "transactionId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stackLevel" : {
            "type" : "integer",
            "format" : "int32"
          },
          "chargingProfilePurpose" : {
            "$ref" : "#/components/schemas/ChargingProfilePurposeType"
          },
          "chargingProfileKind" : {
            "$ref" : "#/components/schemas/ChargingProfileKindType"
          },
          "recurrencyKind" : {
            "$ref" : "#/components/schemas/RecurrencyKindType"
          },
          "validFrom" : {
            "$ref" : "#/components/schemas/ZonedDateTime"
          },
          "validTo" : {
            "$ref" : "#/components/schemas/ZonedDateTime"
          },
          "chargingSchedule" : {
            "$ref" : "#/components/schemas/ChargingSchedule"
          }
        }
      },
      "ChargingProfileKindType" : {
        "type" : "string",
        "enum" : [ "Absolute", "Recurring", "Relative" ]
      },
      "ChargingProfilePeriod" : {
        "type" : "object",
        "required" : [ "start_period", "limit" ],
        "properties" : {
          "start_period" : {
            "type" : "integer",
            "format" : "int32"
          },
          "limit" : {
            "type" : "number",
            "format" : "float"
          }
        }
      },
      "ChargingProfilePurposeType" : {
        "type" : "string",
        "enum" : [ "ChargePointMaxProfile", "TxDefaultProfile", "TxProfile" ]
      },
      "ChargingProfileResultType" : {
        "type" : "string",
        "enum" : [ "ACCEPTED", "REJECTED", "UNKNOWN" ]
      },
      "ChargingProfileStatus" : {
        "type" : "string",
        "enum" : [ "Accepted", "Rejected", "NotSupported" ]
      },
      "ChargingRateUnit" : {
        "type" : "string",
        "enum" : [ "W", "A" ]
      },
      "ChargingRateUnitType" : {
        "type" : "string",
        "enum" : [ "W", "A" ]
      },
      "ChargingRateUnitType1" : {
        "type" : "string",
        "enum" : [ "W", "A" ]
      },
      "ChargingSchedule" : {
        "type" : "object",
        "properties" : {
          "duration" : {
            "type" : "integer",
            "format" : "int32"
          },
          "startSchedule" : {
            "$ref" : "#/components/schemas/ZonedDateTime"
          },
          "chargingRateUnit" : {
            "$ref" : "#/components/schemas/ChargingRateUnitType"
          },
          "chargingSchedulePeriod" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChargingSchedulePeriod"
            }
          },
          "minChargingRate" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "ChargingSchedulePeriod" : {
        "type" : "object",
        "properties" : {
          "startPeriod" : {
            "type" : "integer",
            "format" : "int32"
          },
          "limit" : {
            "type" : "number",
            "format" : "double"
          },
          "numberPhases" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ClearCacheConfirmation" : {
        "type" : "object",
        "xml" : {
          "name" : "clearCacheResponse"
        },
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/ClearCacheStatus"
          }
        }
      },
      "ClearCacheRequest" : {
        "type" : "object",
        "properties" : {
          "ocppMessageId" : {
            "type" : "string"
          }
        }
      },
      "ClearCacheStatus" : {
        "type" : "string",
        "enum" : [ "Accepted", "Rejected" ]
      },
      "ClearChargingProfileConfirmation" : {
        "type" : "object",
        "xml" : {
          "name" : "clearChargingProfileResponse"
        },
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/ClearChargingProfileStatus"
          }
        }
      },
      "ClearChargingProfileRequest" : {
        "type" : "object",
        "properties" : {
          "ocppMessageId" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "connectorId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "chargingProfilePurpose" : {
            "$ref" : "#/components/schemas/ChargingProfilePurposeType"
          },
          "stackLevel" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ClearChargingProfileStatus" : {
        "type" : "string",
        "enum" : [ "Accepted", "Unknown" ]
      },
      "CommandResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "ConfigurationStatus" : {
        "type" : "string",
        "enum" : [ "Accepted", "Rejected", "RebootRequired", "NotSupported" ]
      },
      "Connector" : {
        "type" : "object",
        "required" : [ "uid", "evse_uid", "standard", "format", "power_type", "max_voltage", "max_amperage", "last_updated" ],
        "properties" : {
          "uid" : {
            "type" : "string",
            "format" : "uuid",
            "pattern" : "\\S"
          },
          "evse_uid" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "standard" : {
            "$ref" : "#/components/schemas/ConnectorType"
          },
          "format" : {
            "$ref" : "#/components/schemas/ConnectorFormat"
          },
          "power_type" : {
            "$ref" : "#/components/schemas/PowerType"
          },
          "max_voltage" : {
            "type" : "integer",
            "format" : "int32"
          },
          "max_amperage" : {
            "type" : "integer",
            "format" : "int32"
          },
          "max_electric_power" : {
            "type" : "integer",
            "format" : "int32"
          },
          "tariff_ids" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "terms_and_conditions" : {
            "type" : "string"
          },
          "last_updated" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "status" : {
            "type" : "string"
          }
        }
      },
      "ConnectorFormat" : {
        "type" : "string",
        "enum" : [ "SOCKET", "CABLE" ]
      },
      "ConnectorType" : {
        "type" : "string",
        "enum" : [ "CHADEMO", "CHAOJI", "DOMESTIC_A", "DOMESTIC_B", "DOMESTIC_C", "DOMESTIC_D", "DOMESTIC_E", "DOMESTIC_F", "DOMESTIC_G", "DOMESTIC_H", "DOMESTIC_I", "DOMESTIC_J", "DOMESTIC_K", "DOMESTIC_L", "DOMESTIC_M", "DOMESTIC_N", "DOMESTIC_O", "GBT_AC", "GBT_DC", "IEC_60309_2_single_16", "IEC_60309_2_three_16", "IEC_60309_2_three_32", "IEC_60309_2_three_64", "IEC_62196_T1", "IEC_62196_T1_COMBO", "IEC_62196_T2", "IEC_62196_T2_COMBO", "IEC_62196_T3A", "IEC_62196_T3C", "NEMA_5_20", "NEMA_6_30", "NEMA_6_50", "NEMA_10_30", "NEMA_10_50", "NEMA_14_30", "NEMA_14_50", "PANTOGRAPH_BOTTOM_UP", "PANTOGRAPH_TOP_DOWN", "TESLA_R", "TESLA_S" ]
      },
      "DataTransferConfirmation" : {
        "type" : "object",
        "xml" : {
          "name" : "dataTransferResponse"
        },
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/DataTransferStatus"
          },
          "data" : {
            "type" : "string"
          }
        }
      },
      "DataTransferRequest" : {
        "type" : "object",
        "properties" : {
          "vendorId" : {
            "type" : "string"
          },
          "messageId" : {
            "type" : "string"
          },
          "data" : {
            "type" : "string"
          },
          "ocppMessageId" : {
            "type" : "string"
          }
        }
      },
      "DataTransferStatus" : {
        "type" : "string",
        "enum" : [ "Accepted", "Rejected", "UnknownMessageId", "UnknownVendorId" ]
      },
      "DayOfWeek" : {
        "type" : "string",
        "enum" : [ "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" ]
      },
      "DisplayText" : {
        "type" : "object",
        "required" : [ "language", "text" ],
        "properties" : {
          "language" : {
            "type" : "string",
            "minLength" : 2,
            "maxLength" : 2,
            "pattern" : "\\S"
          },
          "text" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 512,
            "pattern" : "\\S"
          }
        }
      },
      "EVSE" : {
        "type" : "object",
        "required" : [ "uid", "status", "connectors", "last_updated" ],
        "properties" : {
          "uid" : {
            "type" : "string",
            "maxLength" : 36,
            "pattern" : "\\S"
          },
          "evse_id" : {
            "type" : "string",
            "maxLength" : 48
          },
          "status" : {
            "$ref" : "#/components/schemas/EVSEStatus"
          },
          "status_schedule" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StatusSchedule"
            }
          },
          "capabilities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Capability"
            }
          },
          "connectors" : {
            "type" : "array",
            "minItems" : 1,
            "items" : {
              "$ref" : "#/components/schemas/Connector"
            }
          },
          "floor_level" : {
            "type" : "string",
            "maxLength" : 4
          },
          "coordinates" : {
            "$ref" : "#/components/schemas/GeoLocation"
          },
          "physical_reference" : {
            "type" : "string",
            "maxLength" : 16
          },
          "directions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DisplayText"
            }
          },
          "parking_restrictions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ParkingRestriction"
            }
          },
          "images" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Image"
            }
          },
          "last_updated" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          }
        }
      },
      "EVSEStatus" : {
        "type" : "string",
        "enum" : [ "AVAILABLE", "BLOCKED", "CHARGING", "INOPERATIVE", "OUTOFORDER", "PLANNED", "REMOVED", "RESERVED", "UNKNOWN" ]
      },
      "EnergyContract" : {
        "type" : "object",
        "required" : [ "supplier_name" ],
        "properties" : {
          "supplier_name" : {
            "type" : "string",
            "maxLength" : 61
          },
          "contract_id" : {
            "type" : "string"
          }
        }
      },
      "EnergyMix" : {
        "type" : "object",
        "required" : [ "is_green_energy" ],
        "properties" : {
          "is_green_energy" : {
            "type" : "boolean"
          },
          "energy_sources" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EnergySource"
            }
          },
          "environ_impact" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EnvironmentalImpact"
            }
          },
          "supplier_name" : {
            "type" : "string"
          },
          "energy_product_name" : {
            "type" : "string"
          }
        }
      },
      "EnergySource" : {
        "type" : "object",
        "required" : [ "source", "percentage" ],
        "properties" : {
          "source" : {
            "$ref" : "#/components/schemas/EnergySourceCategory"
          },
          "percentage" : {
            "type" : "number",
            "format" : "float",
            "pattern" : "^\\d{1,2147483647}([.]\\d{1,4})?$",
            "maximum" : 100,
            "minimum" : 0
          }
        }
      },
      "EnergySourceCategory" : {
        "type" : "string",
        "enum" : [ "NUCLEAR", "GENERAL_FOSSIL", "COAL", "GAS", "GENERAL_GREEN", "SOLAR", "WIND", "WATER" ]
      },
      "EnvironmentalImpact" : {
        "type" : "object",
        "required" : [ "category", "amount" ],
        "properties" : {
          "category" : {
            "$ref" : "#/components/schemas/EnvironmentalImpactCategory"
          },
          "amount" : {
            "type" : "number",
            "format" : "float",
            "pattern" : "^\\d{1,2147483647}([.]\\d{1,4})?$",
            "minimum" : 0
          }
        }
      },
      "EnvironmentalImpactCategory" : {
        "type" : "string",
        "enum" : [ "NUCLEAR_WASTE", "CARBON_DIOXIDE" ]
      },
      "ExceptionalPeriod" : {
        "type" : "object",
        "required" : [ "period_begin", "period_end" ],
        "properties" : {
          "period_begin" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "period_end" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          }
        }
      },
      "Facility" : {
        "type" : "string",
        "enum" : [ "HOTEL", "RESTAURANT", "CAFE", "MALL", "SUPERMARKET", "SPORT", "RECREATION_AREA", "NATURE", "MUSEUM", "BIKE_SHARING", "BUS_STOP", "TAXI_STAND", "TRAM_STOP", "METRO_STATION", "TRAIN_STATION", "AIRPORT", "PARKING_LOT", "CARPOOL_PARKING", "FUEL_STATION", "WIFI" ]
      },
      "GeoLocation" : {
        "type" : "object",
        "required" : [ "latitude", "longitude" ],
        "properties" : {
          "latitude" : {
            "type" : "string",
            "maxLength" : 10,
            "pattern" : "\\S"
          },
          "longitude" : {
            "type" : "string",
            "maxLength" : 11,
            "pattern" : "\\S"
          }
        }
      },
      "GetCompositeScheduleConfirmation" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/GetCompositeScheduleStatus"
          },
          "connectorId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "scheduleStart" : {
            "$ref" : "#/components/schemas/ZonedDateTime"
          },
          "chargingSchedule" : {
            "$ref" : "#/components/schemas/ChargingSchedule"
          }
        }
      },
      "GetCompositeScheduleRequest" : {
        "type" : "object",
        "properties" : {
          "ocppMessageId" : {
            "type" : "string"
          },
          "connectorId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "duration" : {
            "type" : "integer",
            "format" : "int32"
          },
          "chargingRateUnit" : {
            "$ref" : "#/components/schemas/ChargingRateUnitType1"
          }
        }
      },
      "GetCompositeScheduleStatus" : {
        "type" : "string",
        "enum" : [ "Accepted", "Rejected" ]
      },
      "GetConfigurationConfirmation" : {
        "type" : "object",
        "xml" : {
          "name" : "getConfigurationResponse"
        },
        "properties" : {
          "configurationKey" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KeyValueType"
            }
          },
          "unknownKey" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "GetConfigurationRequest" : {
        "type" : "object",
        "properties" : {
          "ocppMessageId" : {
            "type" : "string"
          },
          "key" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "GetDiagnosticsConfirmation" : {
        "type" : "object",
        "xml" : {
          "name" : "getDiagnosticsResponse"
        },
        "properties" : {
          "fileName" : {
            "type" : "string"
          }
        }
      },
      "GetDiagnosticsRequest" : {
        "type" : "object",
        "properties" : {
          "location" : {
            "type" : "string"
          },
          "startTime" : {
            "$ref" : "#/components/schemas/ZonedDateTime"
          },
          "stopTime" : {
            "$ref" : "#/components/schemas/ZonedDateTime"
          },
          "retries" : {
            "type" : "integer",
            "format" : "int32"
          },
          "retryInterval" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ocppMessageId" : {
            "type" : "string"
          }
        }
      },
      "GetLocalListVersionConfirmation" : {
        "type" : "object",
        "properties" : {
          "listVersion" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "GetLocalListVersionRequest" : {
        "type" : "object",
        "properties" : {
          "ocppMessageId" : {
            "type" : "string"
          }
        }
      },
      "Hours" : {
        "type" : "object",
        "required" : [ "twentyfourseven" ],
        "properties" : {
          "twentyfourseven" : {
            "type" : "boolean"
          },
          "regular_hours" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RegularHours"
            }
          },
          "exceptional_openings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ExceptionalPeriod"
            }
          },
          "exceptional_closings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ExceptionalPeriod"
            }
          }
        }
      },
      "IbanDto" : {
        "type" : "object",
        "properties" : {
          "iban" : {
            "type" : "string"
          },
          "entity_id" : {
            "type" : "string"
          },
          "bank" : {
            "type" : "string"
          },
          "owner_name" : {
            "type" : "string"
          }
        }
      },
      "IdTagInfo" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/AuthorizationStatus"
          },
          "expiryDate" : {
            "$ref" : "#/components/schemas/ZonedDateTime"
          },
          "parentIdTag" : {
            "type" : "string"
          }
        }
      },
      "Image" : {
        "type" : "object",
        "required" : [ "url", "category", "type" ],
        "properties" : {
          "url" : {
            "type" : "string",
            "pattern" : "\\S"
          },
          "thumbnail" : {
            "type" : "string"
          },
          "category" : {
            "$ref" : "#/components/schemas/ImageCategory"
          },
          "type" : {
            "type" : "string",
            "maxLength" : 4,
            "pattern" : "\\S"
          },
          "width" : {
            "type" : "string"
          },
          "height" : {
            "type" : "string"
          }
        }
      },
      "ImageCategory" : {
        "type" : "string",
        "enum" : [ "CHARGER", "ENTRANCE", "LOCATION", "NETWORK", "OPERATOR", "OTHER", "OWNER" ]
      },
      "IncomePeriodType" : {
        "type" : "string",
        "enum" : [ "TODAY", "THIS_WEEK", "THIS_MONTH", "LAST_30_DAYS", "LAST_90_DAYS" ]
      },
      "KeyValueType" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string"
          },
          "readonly" : {
            "type" : "boolean"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "KwhPeriodType" : {
        "type" : "string",
        "enum" : [ "THIS_WEEK", "LAST_WEEK" ]
      },
      "LocalDate" : {
        "type" : "string",
        "format" : "date",
        "examples" : [ "2022-03-10" ]
      },
      "LocalDateTime" : {
        "type" : "string",
        "format" : "date-time",
        "examples" : [ "2022-03-10T12:15:50" ]
      },
      "Location" : {
        "type" : "object",
        "required" : [ "country_code", "party_id", "id", "last_updated", "publish", "address", "city", "country", "coordinates", "time_zone" ],
        "properties" : {
          "country_code" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 2,
            "pattern" : "\\S"
          },
          "party_id" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 3,
            "pattern" : "\\S"
          },
          "id" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 36,
            "pattern" : "\\S"
          },
          "last_updated" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "publish" : {
            "type" : "boolean"
          },
          "publish_allowed_to" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PublishTokenType"
            }
          },
          "name" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 255
          },
          "address" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 45,
            "pattern" : "\\S"
          },
          "city" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 45,
            "pattern" : "\\S"
          },
          "postal_code" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 10
          },
          "state" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 20
          },
          "country" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 3,
            "pattern" : "\\S"
          },
          "coordinates" : {
            "$ref" : "#/components/schemas/GeoLocation"
          },
          "related_locations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdditionalGeoLocation"
            }
          },
          "parking_type" : {
            "$ref" : "#/components/schemas/ParkingType"
          },
          "evses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EVSE"
            }
          },
          "directions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DisplayText"
            }
          },
          "operator" : {
            "$ref" : "#/components/schemas/BusinessDetails"
          },
          "suboperator" : {
            "$ref" : "#/components/schemas/BusinessDetails"
          },
          "owner" : {
            "$ref" : "#/components/schemas/BusinessDetails"
          },
          "facilities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Facility"
            }
          },
          "time_zone" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 255,
            "pattern" : "\\S"
          },
          "opening_times" : {
            "$ref" : "#/components/schemas/Hours"
          },
          "charging_when_closed" : {
            "type" : "boolean"
          },
          "images" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Image"
            }
          },
          "energy_mix" : {
            "$ref" : "#/components/schemas/EnergyMix"
          }
        }
      },
      "Location1" : {
        "type" : "string",
        "enum" : [ "Body", "Cable", "EV", "Inlet", "Outlet" ]
      },
      "LocationPutRequest" : {
        "type" : "object",
        "properties" : {
          "location" : {
            "$ref" : "#/components/schemas/Location"
          },
          "iban" : {
            "$ref" : "#/components/schemas/IbanDto"
          }
        }
      },
      "LocationReferencesDto" : {
        "type" : "object",
        "required" : [ "location_id" ],
        "properties" : {
          "location_id" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 36,
            "pattern" : "\\S"
          },
          "evse_uids" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "minLength" : 1,
              "maxLength" : 36,
              "pattern" : "/[:ascii:]/i"
            }
          }
        }
      },
      "MeterValue" : {
        "type" : "object",
        "properties" : {
          "timestamp" : {
            "$ref" : "#/components/schemas/ZonedDateTime"
          },
          "sampledValue" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SampledValue"
            }
          }
        }
      },
      "MoneyTransactionRequest" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "amount" : {
            "type" : "number"
          },
          "description" : {
            "type" : "string"
          },
          "createdAt" : {
            "$ref" : "#/components/schemas/ZonedDateTime"
          },
          "referenceNumber" : {
            "$ref" : "#/components/schemas/UUID"
          },
          "status" : {
            "$ref" : "#/components/schemas/Status"
          },
          "location" : {
            "type" : "string"
          },
          "from_wallet" : {
            "type" : "integer",
            "format" : "int64"
          },
          "to_wallet" : {
            "type" : "integer",
            "format" : "int64"
          },
          "type" : {
            "$ref" : "#/components/schemas/Type"
          }
        }
      },
      "ParkingRestriction" : {
        "type" : "string",
        "enum" : [ "EV_ONLY", "PLUGGED", "DISABLED", "CUSTOMERS", "MOTORCYCLES" ]
      },
      "ParkingType" : {
        "type" : "string",
        "enum" : [ "ALONG_MOTORWAY", "PARKING_GARAGE", "PARKING_LOT", "ON_DRIVEWAY", "ON_STREET", "UNDERGROUND_GARAGE" ]
      },
      "PowerType" : {
        "type" : "string",
        "enum" : [ "AC_1_PHASE", "AC_2_PHASE", "AC_2_PHASE_SPLIT", "AC_3_PHASE", "DC" ]
      },
      "Price" : {
        "type" : "object",
        "required" : [ "excl_vat", "incl_vat" ],
        "properties" : {
          "excl_vat" : {
            "type" : "number",
            "format" : "float",
            "pattern" : "^\\d{1,2147483647}([.]\\d{1,4})?$"
          },
          "incl_vat" : {
            "type" : "number",
            "format" : "float",
            "pattern" : "^\\d{1,2147483647}([.]\\d{1,4})?$"
          }
        }
      },
      "PriceComponent" : {
        "type" : "object",
        "required" : [ "type", "price" ],
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/TariffDimensionType"
          },
          "price" : {
            "type" : "number",
            "exclusiveMinimum" : 0,
            "format" : "float",
            "pattern" : "^\\d{1,2147483647}([.]\\d{1,4})?$"
          },
          "vat" : {
            "type" : "number",
            "format" : "float",
            "pattern" : "^\\d{1,2147483647}([.]\\d{1,4})?$"
          },
          "step_size" : {
            "type" : "integer",
            "exclusiveMinimum" : 0,
            "format" : "int32"
          }
        }
      },
      "ProfileType" : {
        "type" : "string",
        "enum" : [ "CHEAP", "FAST", "GREEN", "REGULAR" ]
      },
      "PublishTokenType" : {
        "type" : "object",
        "properties" : {
          "uid" : {
            "type" : "string",
            "maxLength" : 36
          },
          "type" : {
            "$ref" : "#/components/schemas/TokenType"
          },
          "visual_number" : {
            "type" : "string",
            "maxLength" : 64
          },
          "issuer" : {
            "type" : "string",
            "maxLength" : 64
          },
          "group_id" : {
            "type" : "string",
            "maxLength" : 36
          }
        }
      },
      "ReasonEnum" : {
        "type" : "string",
        "enum" : [ "DeAuthorized", "EmergencyStop", "EnergyLimitReached", "EVDisconnected", "GroundFault", "ImmediateReset", "Local", "LocalOutOfCredit", "MasterPass", "Other", "OvercurrentFault", "PowerLoss", "PowerQuality", "Reboot", "Remote", "SOCLimitReached", "StoppedByEV", "TimeLimitReached", "Timeout" ]
      },
      "RecurrencyKindType" : {
        "type" : "string",
        "enum" : [ "Daily", "Weekly" ]
      },
      "RegularHours" : {
        "type" : "object",
        "required" : [ "weekday", "period_begin", "period_end" ],
        "properties" : {
          "weekday" : {
            "type" : "integer",
            "format" : "int32",
            "maximum" : 7,
            "minimum" : 1
          },
          "period_begin" : {
            "type" : "string",
            "maxLength" : 5,
            "pattern" : "\\S"
          },
          "period_end" : {
            "type" : "string",
            "maxLength" : 5,
            "pattern" : "\\S"
          }
        }
      },
      "RemoteStartStopStatus" : {
        "type" : "string",
        "enum" : [ "Accepted", "Rejected" ]
      },
      "RemoteStartTransactionConfirmation" : {
        "type" : "object",
        "xml" : {
          "name" : "remoteStartTransactionResponse"
        },
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/RemoteStartStopStatus"
          }
        }
      },
      "RemoteStartTransactionRequest" : {
        "type" : "object",
        "properties" : {
          "connectorId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "idTag" : {
            "type" : "string"
          },
          "chargingProfile" : {
            "$ref" : "#/components/schemas/ChargingProfile1"
          },
          "ocppMessageId" : {
            "type" : "string"
          }
        }
      },
      "RemoteStopTransactionConfirmation" : {
        "type" : "object",
        "xml" : {
          "name" : "remoteStopTransactionResponse"
        },
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/RemoteStartStopStatus"
          }
        }
      },
      "RemoteStopTransactionRequest" : {
        "type" : "object",
        "properties" : {
          "ocppMessageId" : {
            "type" : "string"
          },
          "transactionId" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ReservationRestrictionType" : {
        "type" : "string",
        "enum" : [ "RESERVATION", "RESERVATION_EXPIRES" ]
      },
      "ReservationStatus" : {
        "type" : "string",
        "enum" : [ "Accepted", "Faulted", "Occupied", "Rejected", "Unavailable" ]
      },
      "ReserveNowConfirmation" : {
        "type" : "object",
        "xml" : {
          "name" : "reserveNowResponse"
        },
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/ReservationStatus"
          }
        }
      },
      "ReserveNowRequest" : {
        "type" : "object",
        "properties" : {
          "connectorId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "expiryDate" : {
            "$ref" : "#/components/schemas/ZonedDateTime"
          },
          "idTag" : {
            "type" : "string"
          },
          "parentIdTag" : {
            "type" : "string"
          },
          "reservationId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ocppMessageId" : {
            "type" : "string"
          }
        }
      },
      "ResetConfirmation" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/ResetStatus"
          }
        }
      },
      "ResetRequest" : {
        "type" : "object",
        "properties" : {
          "ocppMessageId" : {
            "type" : "string"
          },
          "type" : {
            "$ref" : "#/components/schemas/ResetType"
          }
        }
      },
      "ResetStatus" : {
        "type" : "string",
        "enum" : [ "Accepted", "Rejected" ]
      },
      "ResetType" : {
        "type" : "string",
        "enum" : [ "Hard", "Soft" ]
      },
      "ResponseFormat" : {
        "type" : "object",
        "required" : [ "status_code", "timestamp" ],
        "properties" : {
          "status_code" : {
            "type" : "integer",
            "format" : "int32",
            "maximum" : 4999,
            "minimum" : 1000
          },
          "status_message" : {
            "type" : "string"
          },
          "timestamp" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "data" : { }
        }
      },
      "ResponseFormatCDRDto" : {
        "type" : "object",
        "required" : [ "status_code", "timestamp" ],
        "properties" : {
          "status_code" : {
            "type" : "integer",
            "format" : "int32",
            "maximum" : 4999,
            "minimum" : 1000
          },
          "status_message" : {
            "type" : "string"
          },
          "timestamp" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "data" : {
            "$ref" : "#/components/schemas/CDRDto"
          }
        }
      },
      "ResponseFormatCommandResponse" : {
        "type" : "object",
        "required" : [ "status_code", "timestamp" ],
        "properties" : {
          "status_code" : {
            "type" : "integer",
            "format" : "int32",
            "maximum" : 4999,
            "minimum" : 1000
          },
          "status_message" : {
            "type" : "string"
          },
          "timestamp" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "data" : {
            "$ref" : "#/components/schemas/CommandResponse"
          }
        }
      },
      "ResponseFormatListTransaction" : {
        "type" : "object",
        "required" : [ "status_code", "timestamp" ],
        "properties" : {
          "status_code" : {
            "type" : "integer",
            "format" : "int32",
            "maximum" : 4999,
            "minimum" : 1000
          },
          "status_message" : {
            "type" : "string"
          },
          "timestamp" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Transaction"
            }
          }
        }
      },
      "ResponseFormatListWallet" : {
        "type" : "object",
        "required" : [ "status_code", "timestamp" ],
        "properties" : {
          "status_code" : {
            "type" : "integer",
            "format" : "int32",
            "maximum" : 4999,
            "minimum" : 1000
          },
          "status_message" : {
            "type" : "string"
          },
          "timestamp" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Wallet"
            }
          }
        }
      },
      "ResponseFormatString" : {
        "type" : "object",
        "required" : [ "status_code", "timestamp" ],
        "properties" : {
          "status_code" : {
            "type" : "integer",
            "format" : "int32",
            "maximum" : 4999,
            "minimum" : 1000
          },
          "status_message" : {
            "type" : "string"
          },
          "timestamp" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "data" : {
            "type" : "string"
          }
        }
      },
      "ResponseFormatWallet" : {
        "type" : "object",
        "required" : [ "status_code", "timestamp" ],
        "properties" : {
          "status_code" : {
            "type" : "integer",
            "format" : "int32",
            "maximum" : 4999,
            "minimum" : 1000
          },
          "status_message" : {
            "type" : "string"
          },
          "timestamp" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "data" : {
            "$ref" : "#/components/schemas/Wallet"
          }
        }
      },
      "SampledValue" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          },
          "context" : {
            "type" : "string"
          },
          "format" : {
            "$ref" : "#/components/schemas/ValueFormat"
          },
          "measurand" : {
            "type" : "string"
          },
          "phase" : {
            "type" : "string"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location1"
          },
          "unit" : {
            "type" : "string"
          }
        }
      },
      "SendLocalListConfirmation" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/UpdateStatus"
          }
        }
      },
      "SendLocalListRequest" : {
        "type" : "object",
        "properties" : {
          "ocppMessageId" : {
            "type" : "string"
          },
          "listVersion" : {
            "type" : "integer",
            "format" : "int32"
          },
          "localAuthorizationList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuthorizationData"
            }
          },
          "updateType" : {
            "$ref" : "#/components/schemas/UpdateType"
          }
        }
      },
      "SetChargingProfileConfirmation" : {
        "type" : "object",
        "xml" : {
          "name" : "setChargingProfileResponse"
        },
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/ChargingProfileStatus"
          }
        }
      },
      "SetChargingProfileRequest" : {
        "type" : "object",
        "properties" : {
          "ocppMessageId" : {
            "type" : "string"
          },
          "connectorId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "csChargingProfiles" : {
            "$ref" : "#/components/schemas/ChargingProfile1"
          }
        }
      },
      "SignedData" : {
        "type" : "object",
        "required" : [ "encoding_method", "signed_values" ],
        "properties" : {
          "encoding_method" : {
            "type" : "string",
            "maxLength" : 36,
            "pattern" : "\\S"
          },
          "encoding_method_version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "public_key" : {
            "type" : "string",
            "maxLength" : 512
          },
          "signed_values" : {
            "type" : "array",
            "minItems" : 1,
            "items" : {
              "$ref" : "#/components/schemas/SignedValue"
            }
          },
          "url" : {
            "type" : "string",
            "maxLength" : 512
          }
        }
      },
      "SignedValue" : {
        "type" : "object",
        "required" : [ "nature", "plain_data", "signed_data" ],
        "properties" : {
          "nature" : {
            "type" : "string",
            "maxLength" : 32,
            "pattern" : "\\S"
          },
          "plain_data" : {
            "type" : "string",
            "maxLength" : 512,
            "pattern" : "\\S"
          },
          "signed_data" : {
            "type" : "string",
            "maxLength" : 5000,
            "pattern" : "\\S"
          }
        }
      },
      "Status" : {
        "type" : "string",
        "enum" : [ "PENDING", "SUCCESS", "ERROR" ]
      },
      "StatusSchedule" : {
        "type" : "object",
        "required" : [ "period_begin", "status" ],
        "properties" : {
          "period_begin" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "period_end" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "status" : {
            "$ref" : "#/components/schemas/EVSEStatus"
          }
        }
      },
      "TariffDimensionType" : {
        "type" : "string",
        "enum" : [ "ENERGY", "FLAT", "PARKING_TIME", "TIME" ]
      },
      "TariffDto" : {
        "type" : "object",
        "required" : [ "country_code", "party_id", "id", "last_updated", "currency", "elements" ],
        "properties" : {
          "country_code" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 2,
            "pattern" : "\\S"
          },
          "party_id" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 3,
            "pattern" : "\\S"
          },
          "id" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 36,
            "pattern" : "\\S"
          },
          "last_updated" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "currency" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 3,
            "pattern" : "\\S"
          },
          "type" : {
            "$ref" : "#/components/schemas/TariffType"
          },
          "tariff_alt_text" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DisplayText"
            }
          },
          "tariff_alt_url" : {
            "type" : "string"
          },
          "min_price" : {
            "$ref" : "#/components/schemas/Price"
          },
          "max_price" : {
            "$ref" : "#/components/schemas/Price"
          },
          "elements" : {
            "type" : "array",
            "minItems" : 1,
            "items" : {
              "$ref" : "#/components/schemas/TariffElement"
            }
          },
          "start_date_time" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "end_date_time" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          },
          "energy_mix" : {
            "$ref" : "#/components/schemas/EnergyMix"
          },
          "enabled" : {
            "type" : "boolean"
          }
        }
      },
      "TariffElement" : {
        "type" : "object",
        "required" : [ "price_components" ],
        "properties" : {
          "price_components" : {
            "type" : "array",
            "minItems" : 1,
            "items" : {
              "$ref" : "#/components/schemas/PriceComponent"
            }
          },
          "restrictions" : {
            "$ref" : "#/components/schemas/TariffRestrictions"
          }
        }
      },
      "TariffRestrictions" : {
        "type" : "object",
        "properties" : {
          "start_time" : {
            "type" : "string"
          },
          "end_time" : {
            "type" : "string"
          },
          "start_date" : {
            "type" : "string"
          },
          "end_date" : {
            "type" : "string"
          },
          "min_kwh" : {
            "type" : "number",
            "format" : "float",
            "pattern" : "^\\d{1,2147483647}([.]\\d{1,4})?$"
          },
          "max_kwh" : {
            "type" : "number",
            "format" : "float",
            "pattern" : "^\\d{1,2147483647}([.]\\d{1,4})?$"
          },
          "min_current" : {
            "type" : "number",
            "format" : "float",
            "pattern" : "^\\d{1,2147483647}([.]\\d{1,4})?$"
          },
          "max_current" : {
            "type" : "number",
            "format" : "float",
            "pattern" : "^\\d{1,2147483647}([.]\\d{1,4})?$"
          },
          "min_power" : {
            "type" : "number",
            "format" : "float",
            "pattern" : "^\\d{1,2147483647}([.]\\d{1,4})?$"
          },
          "max_power" : {
            "type" : "number",
            "format" : "float",
            "pattern" : "^\\d{1,2147483647}([.]\\d{1,4})?$"
          },
          "min_duration" : {
            "type" : "integer",
            "format" : "int32"
          },
          "max_duration" : {
            "type" : "integer",
            "format" : "int32"
          },
          "day_of_week" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DayOfWeek"
            }
          },
          "reservation" : {
            "$ref" : "#/components/schemas/ReservationRestrictionType"
          }
        }
      },
      "TariffType" : {
        "type" : "string",
        "enum" : [ "AD_HOC_PAYMENT", "PROFILE_CHEAP", "PROFILE_FAST", "REGULAR", "PROFILE_GREEN" ]
      },
      "TokenDto" : {
        "type" : "object",
        "required" : [ "country_code", "party_id", "uid", "type", "contract_id", "issuer", "valid", "whitelist", "last_updated" ],
        "properties" : {
          "country_code" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 2,
            "pattern" : "/[:ascii:]/i"
          },
          "party_id" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 3,
            "pattern" : "/[:ascii:]/i"
          },
          "uid" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 36,
            "pattern" : "/[:ascii:]/i"
          },
          "type" : {
            "$ref" : "#/components/schemas/TokenType"
          },
          "contract_id" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 36,
            "pattern" : "/[:ascii:]/i"
          },
          "visual_number" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 64
          },
          "issuer" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 64,
            "pattern" : "\\S"
          },
          "group_id" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 36
          },
          "valid" : {
            "type" : "boolean"
          },
          "whitelist" : {
            "$ref" : "#/components/schemas/WhitelistType"
          },
          "language" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 2
          },
          "default_profile_type" : {
            "$ref" : "#/components/schemas/ProfileType"
          },
          "energy_contract" : {
            "$ref" : "#/components/schemas/EnergyContract"
          },
          "last_updated" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          }
        }
      },
      "TokenType" : {
        "type" : "string",
        "enum" : [ "AD_HOC_USER", "APP_USER", "OTHER", "RFID" ]
      },
      "Transaction" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "amount" : {
            "type" : "number"
          },
          "description" : {
            "type" : "string"
          },
          "createdAt" : {
            "$ref" : "#/components/schemas/ZonedDateTime"
          },
          "referenceNumber" : {
            "$ref" : "#/components/schemas/UUID"
          },
          "status" : {
            "$ref" : "#/components/schemas/Status"
          },
          "location" : {
            "type" : "string"
          },
          "from_wallet" : {
            "$ref" : "#/components/schemas/Wallet"
          },
          "to_wallet" : {
            "$ref" : "#/components/schemas/Wallet"
          },
          "type" : {
            "$ref" : "#/components/schemas/Type"
          }
        }
      },
      "TriggerMessageConfirmation" : {
        "type" : "object",
        "xml" : {
          "name" : "triggerMessageResponse"
        },
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/TriggerMessageStatus"
          }
        }
      },
      "TriggerMessageRequest" : {
        "type" : "object",
        "properties" : {
          "requestedMessage" : {
            "$ref" : "#/components/schemas/TriggerMessageRequestType"
          },
          "connectorId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ocppMessageId" : {
            "type" : "string"
          }
        }
      },
      "TriggerMessageRequestType" : {
        "type" : "string",
        "enum" : [ "BootNotification", "DiagnosticsStatusNotification", "FirmwareStatusNotification", "Heartbeat", "MeterValues", "StatusNotification" ]
      },
      "TriggerMessageStatus" : {
        "type" : "string",
        "enum" : [ "Accepted", "Rejected", "NotImplemented" ]
      },
      "Type" : {
        "type" : "string",
        "enum" : [ "INITIAL", "PAYMENT", "TRANSFER" ]
      },
      "UUID" : {
        "type" : "string",
        "format" : "uuid",
        "pattern" : "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
      },
      "UnlockConnectorConfirmation" : {
        "type" : "object",
        "xml" : {
          "name" : "unlockConnectorResponse"
        },
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/UnlockStatus"
          }
        }
      },
      "UnlockConnectorRequest" : {
        "type" : "object",
        "properties" : {
          "ocppMessageId" : {
            "type" : "string"
          },
          "connectorId" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "UnlockStatus" : {
        "type" : "string",
        "enum" : [ "Unlocked", "UnlockFailed", "NotSupported" ]
      },
      "UpdateFirmwareConfirmation" : {
        "type" : "object",
        "xml" : {
          "name" : "updateFirmwareResponse"
        }
      },
      "UpdateFirmwareRequest" : {
        "type" : "object",
        "properties" : {
          "location" : {
            "type" : "string"
          },
          "retries" : {
            "type" : "integer",
            "format" : "int32"
          },
          "retrieveDate" : {
            "$ref" : "#/components/schemas/ZonedDateTime"
          },
          "retryInterval" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ocppMessageId" : {
            "type" : "string"
          }
        }
      },
      "UpdateStatus" : {
        "type" : "string",
        "enum" : [ "Accepted", "Failed", "NotSupported", "VersionMismatch" ]
      },
      "UpdateType" : {
        "type" : "string",
        "enum" : [ "Differential", "Full" ]
      },
      "ValueFormat" : {
        "type" : "string",
        "enum" : [ "Raw", "SignedData" ]
      },
      "Wallet" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "balance" : {
            "type" : "number"
          },
          "token" : {
            "type" : "string"
          },
          "idTag" : {
            "type" : "string"
          },
          "location" : {
            "type" : "string"
          },
          "enabled" : {
            "type" : "boolean"
          }
        }
      },
      "WhitelistType" : {
        "type" : "string",
        "enum" : [ "ALWAYS", "ALLOWED", "ALLOWED_OFFLINE", "NEVER" ]
      },
      "ZonedDateTime" : {
        "type" : "string",
        "format" : "date-time",
        "examples" : [ "2022-03-10T12:15:50-04:00" ]
      }
    },
    "securitySchemes" : {
      "keycloak" : {
        "description" : "Authentication",
        "type" : "openIdConnect",
        "openIdConnectUrl" : "http://193.111.78.145:8585/realms/bladeco-production/.well-known/openid-configuration"
      }
    }
  },
  "paths" : {
    "/api/cache/status" : {
      "get" : {
        "summary" : "Get All Cache Entries",
        "description" : "Retrieves all EVSE session entries from the cache",
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved cache entries",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CacheEVSESession"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Cache Resource" ]
      }
    },
    "/api/cache/status/{evse-uid}" : {
      "get" : {
        "summary" : "Get Cache Entry by EVSE UID",
        "description" : "Retrieves a specific EVSE session entry from the cache using its UID",
        "parameters" : [ {
          "name" : "evse-uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved EVSE cache entry",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CacheEVSESession"
                }
              }
            }
          },
          "404" : {
            "description" : "EVSE entry not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Cache Resource" ]
      }
    },
    "/api/cdr" : {
      "post" : {
        "tags" : [ "Cdr" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CDRDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormatString"
                }
              }
            }
          }
        },
        "summary" : "Post Cdr"
      },
      "get" : {
        "tags" : [ "Cdr" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 36
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormatCDRDto"
                }
              }
            }
          }
        },
        "summary" : "Get Cdr"
      }
    },
    "/api/chargingProfiles" : {
      "post" : {
        "summary" : "Receive Charging Profile Response",
        "description" : "Receive the asynchronous response from the Charge Point containing profile results",
        "tags" : [ "ChargingProfiles" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AbstractProfileResult"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully processed charging profile response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing credentials",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/chargingProfiles/{session_id}" : {
      "put" : {
        "summary" : "Update Active Charging Profile",
        "description" : "Update the active charging profile for a specific session when changes occur due to external factors",
        "tags" : [ "ChargingProfiles" ],
        "parameters" : [ {
          "name" : "session_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 36
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ActiveChargingProfile"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated charging profile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing credentials",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Session not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/commands/{evse_id}/cancel-reservation" : {
      "put" : {
        "summary" : "Cancel Reservation",
        "description" : "Cancels an existing reservation at the specified charging station",
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CancelReservationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sent cancel reservation command",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CancelReservationConfirmation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Charging station or reservation not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Commands Resource" ]
      }
    },
    "/api/commands/{evse_id}/change-availability" : {
      "put" : {
        "summary" : "Change Availability",
        "description" : "Changes the availability status of the specified charging station",
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChangeAvailabilityRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sent change availability command",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeAvailabilityConfirmation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Charging station not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Commands Resource" ]
      }
    },
    "/api/commands/{evse_id}/change-configuration" : {
      "put" : {
        "summary" : "Change Configuration",
        "description" : "Changes configuration settings on the specified charging station",
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChangeConfigurationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sent change configuration command",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeConfigurationConfirmation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Charging station not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Commands Resource" ]
      }
    },
    "/api/commands/{evse_id}/clear-cache" : {
      "put" : {
        "summary" : "Clear Cache",
        "description" : "Clears the authorization cache on the specified charging station",
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClearCacheRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sent clear cache command",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClearCacheConfirmation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Charging station not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Commands Resource" ]
      }
    },
    "/api/commands/{evse_id}/clear-charging-profile" : {
      "put" : {
        "summary" : "Clear Charging Profile",
        "description" : "Clears charging profiles on the specified charging station",
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClearChargingProfileRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sent clear charging profile command",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClearChargingProfileConfirmation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Charging station not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Commands Resource" ]
      }
    },
    "/api/commands/{evse_id}/data-transfer" : {
      "put" : {
        "summary" : "Data Transfer",
        "description" : "Sends a data transfer request to the specified charging station",
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DataTransferRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sent data transfer command",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DataTransferConfirmation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Charging station not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Commands Resource" ]
      }
    },
    "/api/commands/{evse_id}/get-composite-schedule" : {
      "put" : {
        "summary" : "Get Composite Schedule",
        "description" : "Retrieves the composite charging schedule from the specified charging station",
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GetCompositeScheduleRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sent get composite schedule command",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCompositeScheduleConfirmation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Charging station not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Commands Resource" ]
      }
    },
    "/api/commands/{evse_id}/get-configuration" : {
      "put" : {
        "summary" : "Get Configuration",
        "description" : "Retrieves configuration settings from the specified charging station",
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GetConfigurationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sent get configuration command",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetConfigurationConfirmation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Charging station not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Commands Resource" ]
      }
    },
    "/api/commands/{evse_id}/get-diagnostics" : {
      "put" : {
        "summary" : "Get Diagnostics",
        "description" : "Requests diagnostic information from the specified charging station",
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GetDiagnosticsRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sent get diagnostics command",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetDiagnosticsConfirmation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Charging station not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Commands Resource" ]
      }
    },
    "/api/commands/{evse_id}/get-local-list-version" : {
      "put" : {
        "summary" : "Get Local List Version",
        "description" : "Retrieves the current version of the local authorization list from the specified charging station",
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GetLocalListVersionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sent get local list version command",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetLocalListVersionConfirmation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Charging station not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Commands Resource" ]
      }
    },
    "/api/commands/{evse_id}/reserve-now" : {
      "put" : {
        "summary" : "Reserve Now",
        "description" : "Creates a reservation on the specified charging station",
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReserveNowRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sent reserve now command",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReserveNowConfirmation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Charging station not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Commands Resource" ]
      }
    },
    "/api/commands/{evse_id}/reset" : {
      "put" : {
        "summary" : "Reset",
        "description" : "Resets the specified charging station",
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResetRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sent reset command",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResetConfirmation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Charging station not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Commands Resource" ]
      }
    },
    "/api/commands/{evse_id}/send-local-list" : {
      "put" : {
        "summary" : "Send Local List",
        "description" : "Sends a local authorization list to the specified charging station",
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SendLocalListRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sent local list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SendLocalListConfirmation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Charging station not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Commands Resource" ]
      }
    },
    "/api/commands/{evse_id}/set-charging-profile" : {
      "put" : {
        "summary" : "Set Charging Profile",
        "description" : "Sets a charging profile on the specified charging station",
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SetChargingProfileRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sent set charging profile command",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SetChargingProfileConfirmation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Charging station not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Commands Resource" ]
      }
    },
    "/api/commands/{evse_id}/start-transaction" : {
      "put" : {
        "summary" : "Start Transaction",
        "description" : "Sends a remote start transaction command to the specified charging station",
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RemoteStartTransactionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sent start transaction command",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RemoteStartTransactionConfirmation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Charging station not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Commands Resource" ]
      }
    },
    "/api/commands/{evse_id}/stop-transaction" : {
      "put" : {
        "summary" : "Stop Transaction",
        "description" : "Sends a remote stop transaction command to the specified charging station",
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RemoteStopTransactionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sent stop transaction command",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RemoteStopTransactionConfirmation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Charging station not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Commands Resource" ]
      }
    },
    "/api/commands/{evse_id}/trigger-message" : {
      "put" : {
        "summary" : "Trigger Message",
        "description" : "Triggers a specific message to be sent by the specified charging station",
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TriggerMessageRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sent trigger message command",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TriggerMessageConfirmation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Charging station not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Commands Resource" ]
      }
    },
    "/api/commands/{evse_id}/unlock-connector" : {
      "put" : {
        "summary" : "Unlock Connector",
        "description" : "Unlocks a connector on the specified charging station",
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UnlockConnectorRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sent unlock connector command",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnlockConnectorConfirmation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Charging station not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Commands Resource" ]
      }
    },
    "/api/commands/{evse_id}/update-firmware" : {
      "put" : {
        "summary" : "Update Firmware",
        "description" : "Instructs the specified charging station to update its firmware",
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateFirmwareRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sent update firmware command",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateFirmwareConfirmation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Charging station not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        },
        "tags" : [ "Ocpp Commands Resource" ]
      }
    },
    "/api/locations" : {
      "get" : {
        "summary" : "Get all Locations",
        "description" : "Retrieves all locations with optional filtering by date range and pagination",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "date_from",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          }
        }, {
          "name" : "date_to",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "0"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "key" : {
                      "type" : "string"
                    },
                    "value" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved locations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Insufficient permissions",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/locations/connector/all" : {
      "get" : {
        "summary" : "Get All Connectors",
        "description" : "Retrieves all connectors with optional filtering and pagination",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "date_from",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          }
        }, {
          "name" : "date_to",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "0"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved connectors",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "No connectors found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/locations/connector/{connector_uid}" : {
      "get" : {
        "summary" : "Get Connector by UID",
        "description" : "Retrieves a specific connector by its unique identifier",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "connector_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved connector",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Connector not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/locations/dashboard" : {
      "get" : {
        "summary" : "Get Dashboard Data",
        "description" : "Retrieves dashboard information including EVSE counts, connector counts, and usage statistics",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "id_tag",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "income_period_type",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/IncomePeriodType"
          }
        }, {
          "name" : "kwh_period_type",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/KwhPeriodType"
          }
        }, {
          "name" : "location_id",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved dashboard data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Insufficient permissions",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/locations/evse/all" : {
      "get" : {
        "summary" : "Get All EVSEs",
        "description" : "Retrieves all EVSEs with optional filtering and pagination",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "date_from",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          }
        }, {
          "name" : "date_to",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "location_id",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "0"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "key" : {
                      "type" : "string"
                    },
                    "value" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved EVSEs",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "No EVSEs found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/locations/evse/evse_id={evse_evse_id}" : {
      "get" : {
        "summary" : "Get EVSE by EVSE ID",
        "description" : "Retrieves a specific EVSE by its EVSE ID",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "evse_evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved EVSE",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "EVSE not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/locations/evse/{evse_uid}" : {
      "get" : {
        "summary" : "Get EVSE by UID",
        "description" : "Retrieves a specific EVSE by its unique identifier",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "evse_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved EVSE",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "EVSE not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/locations/evses/{location_id}" : {
      "get" : {
        "summary" : "Get Location EVSEs",
        "description" : "Retrieves all EVSEs for a specific location",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "location_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved location EVSEs",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Location not found or no EVSEs available",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/locations/related_locations" : {
      "put" : {
        "summary" : "Get Related Location IDs by Geo Locations",
        "description" : "Retrieves location IDs based on provided longitude/latitude pairs",
        "tags" : [ "Location" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "number"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved related location IDs",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/locations/{location_id}" : {
      "put" : {
        "summary" : "Create or Update Location",
        "description" : "Creates a new location or updates an existing one with the specified ID",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "location_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LocationPutRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully created or updated location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Insufficient permissions to modify this location",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Partially Update Location",
        "description" : "Updates specific fields of an existing location",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "location_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Location"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Insufficient permissions to modify this location",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      },
      "get" : {
        "summary" : "Get Location by ID",
        "description" : "Retrieves a specific location by its ID",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "location_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Delete Location",
        "description" : "Deletes a location with the specified ID",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "location_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Insufficient permissions to delete this location",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/locations/{location_id}/tokens" : {
      "get" : {
        "summary" : "Get Location Tokens",
        "description" : "Retrieves all tokens associated with a specific location",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "location_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved location tokens",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/locations/{location_id}/tokens/{token_uid}" : {
      "delete" : {
        "summary" : "Remove Location-Token Relation",
        "description" : "Removes the association between a token and a location",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "location_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "token_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully removed token relation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Insufficient permissions",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Location or token not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      },
      "get" : {
        "summary" : "Check Location-Token Relation",
        "description" : "Checks if a token is related to a specific location",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "location_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "token_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully checked token relation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Location or token not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/locations/{location_id}/tokens/{token_uid}/{id_tag}" : {
      "put" : {
        "summary" : "Add Token to Location",
        "description" : "Associates a token with a location and creates a wallet",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "id_tag",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "location_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "token_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully added token relation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Location or token not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/locations/{location_id}/{evse_uid}" : {
      "put" : {
        "summary" : "Create or Update EVSE",
        "description" : "Creates a new EVSE or updates an existing one at the specified location",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "evse_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "location_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EVSE"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully created or updated EVSE",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Insufficient permissions",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Partially Update EVSE",
        "description" : "Updates specific fields of an existing EVSE",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "evse_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "location_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EVSE"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated EVSE",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Insufficient permissions",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Location or EVSE not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      },
      "get" : {
        "summary" : "Get EVSE by Location ID and EVSE UID",
        "description" : "Retrieves a specific EVSE from a location",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "evse_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "location_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved EVSE",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Location or EVSE not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/locations/{location_id}/{evse_uid}/{connector_uid}" : {
      "put" : {
        "summary" : "Create or Update Connector",
        "description" : "Creates a new connector or updates an existing one at the specified EVSE and location",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "connector_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        }, {
          "name" : "evse_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "location_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Connector"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully created or updated connector",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Insufficient permissions",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Location or EVSE not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Partially Update Connector",
        "description" : "Updates specific fields of an existing connector",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "connector_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        }, {
          "name" : "evse_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "location_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Connector"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated connector",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Insufficient permissions",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Location, EVSE, or connector not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      },
      "get" : {
        "summary" : "Get Connector",
        "description" : "Retrieves a specific connector from an EVSE at a location",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "connector_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        }, {
          "name" : "evse_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "location_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved connector",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Location, EVSE, or connector not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/locations/{sourceLocationId}/{evse_uid}/to/{targetLocationId}" : {
      "patch" : {
        "summary" : "Transfer EVSE Between Locations",
        "description" : "Transfers an EVSE from source location to target location",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "evse_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sourceLocationId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "targetLocationId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully transferred EVSE",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "404" : {
            "description" : "Source location, target location, or EVSE not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Insufficient permissions",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/locations/{token_uid}/locations" : {
      "get" : {
        "summary" : "Get Token Locations",
        "description" : "Retrieves all locations associated with a specific token",
        "tags" : [ "Location" ],
        "parameters" : [ {
          "name" : "token_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved token locations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Token not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/logs" : {
      "get" : {
        "summary" : "Get logs",
        "description" : "Fetch ocpp logs",
        "tags" : [ "Logs" ],
        "parameters" : [ {
          "name" : "date_from",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          }
        }, {
          "name" : "date_to",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          }
        }, {
          "name" : "evse_id",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "location",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "0"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully fetched ocpp logs",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing credentials",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Session not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/self/wallets" : {
      "get" : {
        "tags" : [ "SelfService" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormatListWallet"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "summary" : "My Wallets",
        "security" : [ {
          "keycloak" : [ ]
        } ]
      }
    },
    "/api/self/wallets/{id}" : {
      "get" : {
        "tags" : [ "SelfService" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormatWallet"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "summary" : "My Wallet",
        "security" : [ {
          "keycloak" : [ ]
        } ]
      }
    },
    "/api/self/wallets/{id}/transactions" : {
      "get" : {
        "tags" : [ "SelfService" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormatListTransaction"
                }
              }
            }
          }
        },
        "summary" : "Find My Transactions By Id"
      }
    },
    "/api/tariffs" : {
      "put" : {
        "summary" : "Create or Update Tariff",
        "description" : "Creates a new tariff or updates an existing one",
        "tags" : [ "Tariff" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TariffDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully created or updated tariff",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Insufficient permissions",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      },
      "get" : {
        "summary" : "Get all Tariffs",
        "description" : "Retrieves all tariffs with optional filtering by date range and pagination",
        "tags" : [ "Tariff" ],
        "parameters" : [ {
          "name" : "date_from",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          }
        }, {
          "name" : "date_to",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "0"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "key" : {
                      "type" : "string"
                    },
                    "value" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved tariffs",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Insufficient permissions",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Delete Tariff",
        "description" : "Deletes a tariff with the specified ID",
        "tags" : [ "Tariff" ],
        "parameters" : [ {
          "name" : "tariff_id",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 36
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted tariff",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Insufficient permissions",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Tariff not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/tariffs/connector_uid={connector_uid}" : {
      "get" : {
        "summary" : "Get Active Tariff for Connector",
        "description" : "Retrieves the active tariff for a specific connector",
        "tags" : [ "Tariff" ],
        "parameters" : [ {
          "name" : "connector_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved active tariff",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Connector not found or no active tariff",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/tariffs/connector_uid={connector_uid}/tariff_id={tariff_id}" : {
      "put" : {
        "summary" : "Set Active Tariff for Connector",
        "description" : "Sets a specific tariff as the active tariff for a connector",
        "tags" : [ "Tariff" ],
        "parameters" : [ {
          "name" : "connector_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        }, {
          "name" : "tariff_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully set active tariff",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Connector or tariff not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/tariffs/{tariff_id}" : {
      "get" : {
        "summary" : "Get Tariff by ID",
        "description" : "Retrieves a specific tariff by its ID",
        "tags" : [ "Tariff" ],
        "parameters" : [ {
          "name" : "tariff_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 36
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved tariff",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Tariff not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/tokens" : {
      "put" : {
        "summary" : "Create or Update Token",
        "description" : "Creates a new token or updates an existing one",
        "tags" : [ "Token" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TokenDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully created or updated token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Insufficient permissions",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      },
      "patch" : {
        "summary" : "Partially Update Token",
        "description" : "Updates specific fields of an existing token",
        "tags" : [ "Token" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TokenDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Insufficient permissions",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Token not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      },
      "get" : {
        "summary" : "Get all Tokens",
        "description" : "Retrieves all tokens with optional filtering by date range and pagination",
        "tags" : [ "Token" ],
        "parameters" : [ {
          "name" : "date_from",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          }
        }, {
          "name" : "date_to",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateTime"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "0"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved tokens",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Insufficient permissions",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/tokens/{token_uid}" : {
      "get" : {
        "summary" : "Get Token by UID",
        "description" : "Retrieves a specific token by its UID",
        "tags" : [ "Token" ],
        "parameters" : [ {
          "name" : "token_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 36
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Token not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/tokens/{token_uid}/authorize" : {
      "post" : {
        "summary" : "Authorize Token",
        "description" : "Real-time authorization request for a specific token",
        "tags" : [ "Token" ],
        "parameters" : [ {
          "name" : "token_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 36
          }
        }, {
          "name" : "type",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LocationReferencesDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully authorized token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid input parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Insufficient permissions",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Token not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/tokens/{token_uid}/{type}" : {
      "get" : {
        "summary" : "Get Token by UID and Type",
        "description" : "Retrieves a specific token by its UID and type",
        "tags" : [ "Token" ],
        "parameters" : [ {
          "name" : "token_uid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 36
          }
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/TokenType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid or missing token",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "Token not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/transaction" : {
      "get" : {
        "summary" : "Get All Transactions",
        "description" : "Retrieves a paginated list of all transactions with optional filters",
        "tags" : [ "Transaction" ],
        "parameters" : [ {
          "name" : "connector_id",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "evse_id",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "meter_start",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "meter_stop",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "reason",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/ReasonEnum"
          }
        }, {
          "name" : "reservation_id",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "session_id",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "start_id_tag",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stop_id_tag",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "timestamp_start",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDate"
          }
        }, {
          "name" : "timestamp_stop",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved transactions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/transaction/active" : {
      "get" : {
        "summary" : "Get All Active Transactions",
        "description" : "Retrieves all currently active transactions in the system",
        "tags" : [ "Transaction" ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved active transactions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/transaction/evses/{evse_id}/history" : {
      "get" : {
        "summary" : "Get EVSE Transaction History",
        "description" : "Retrieves transaction history for a specific EVSE",
        "tags" : [ "Transaction" ],
        "parameters" : [ {
          "name" : "evse_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "connector_id",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "evse_id",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "meter_start",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "meter_stop",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "reason",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/ReasonEnum"
          }
        }, {
          "name" : "reservation_id",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "session_id",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        }, {
          "name" : "start_id_tag",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stop_id_tag",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "timestamp_start",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDate"
          }
        }, {
          "name" : "timestamp_stop",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved EVSE transaction history",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "EVSE not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/transaction/id_tag={id_tag}/active" : {
      "get" : {
        "summary" : "Get User's Active Transactions",
        "description" : "Retrieves all active transactions for a specific user",
        "tags" : [ "Transaction" ],
        "parameters" : [ {
          "name" : "id_tag",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved active transactions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/transaction/location_id={location_id}/active" : {
      "get" : {
        "summary" : "Get Location's Active Transactions",
        "description" : "Retrieves all active transactions for a specific location",
        "tags" : [ "Transaction" ],
        "parameters" : [ {
          "name" : "location_id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved location transactions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/transaction/{id_tag}/history" : {
      "get" : {
        "summary" : "Get User's Transaction History",
        "description" : "Retrieves paginated transaction history for a specific user",
        "tags" : [ "Transaction" ],
        "parameters" : [ {
          "name" : "id_tag",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "connector_id",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "evse_id",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "meter_start",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "meter_stop",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "reason",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/ReasonEnum"
          }
        }, {
          "name" : "reservation_id",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "session_id",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "start_id_tag",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stop_id_tag",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "timestamp_start",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDate"
          }
        }, {
          "name" : "timestamp_stop",
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved transaction history",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormat"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid parameters",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/problem+json" : { }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : { }
            }
          }
        }
      }
    },
    "/api/wallets" : {
      "post" : {
        "tags" : [ "Wallet" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Wallet"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormatCommandResponse"
                }
              }
            }
          }
        },
        "summary" : "Create"
      }
    },
    "/api/wallets/token={token}" : {
      "get" : {
        "tags" : [ "Wallet" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormatListWallet"
                }
              }
            }
          }
        },
        "summary" : "Token Wallets"
      }
    },
    "/api/wallets/transactions" : {
      "get" : {
        "tags" : [ "Wallet" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "0"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormatListTransaction"
                }
              }
            }
          }
        },
        "summary" : "Find All Transactions"
      }
    },
    "/api/wallets/transfer" : {
      "post" : {
        "tags" : [ "Wallet" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MoneyTransactionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormatCommandResponse"
                }
              }
            }
          }
        },
        "summary" : "Transfer Funds"
      }
    },
    "/api/wallets/{id}/transactions" : {
      "get" : {
        "tags" : [ "Wallet" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormatListTransaction"
                }
              }
            }
          }
        },
        "summary" : "Find Transactions By Id"
      }
    },
    "/api/wallets/{location}" : {
      "get" : {
        "tags" : [ "Wallet" ],
        "parameters" : [ {
          "name" : "location",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "0"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormatListWallet"
                }
              }
            }
          }
        },
        "summary" : "Get Wallets"
      }
    },
    "/api/wallets/{location}/token={token}" : {
      "get" : {
        "tags" : [ "Wallet" ],
        "parameters" : [ {
          "name" : "location",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormatListWallet"
                }
              }
            }
          }
        },
        "summary" : "Find By Token"
      }
    },
    "/api/wallets/{location}/token={token}/transactions" : {
      "get" : {
        "tags" : [ "Wallet" ],
        "parameters" : [ {
          "name" : "location",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "0"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormatListTransaction"
                }
              }
            }
          }
        },
        "summary" : "Find Location Transactions By Token"
      }
    },
    "/api/wallets/{location}/transactions" : {
      "get" : {
        "tags" : [ "Wallet" ],
        "parameters" : [ {
          "name" : "location",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "0"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormatListTransaction"
                }
              }
            }
          }
        },
        "summary" : "Find Transactions By Location Id"
      }
    },
    "/api/wallets/{location}/{id}" : {
      "put" : {
        "tags" : [ "Wallet" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "location",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Wallet"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormatCommandResponse"
                }
              }
            }
          }
        },
        "summary" : "Update"
      },
      "get" : {
        "tags" : [ "Wallet" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "location",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormatWallet"
                }
              }
            }
          }
        },
        "summary" : "Find By Id"
      },
      "delete" : {
        "tags" : [ "Wallet" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "location",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormatCommandResponse"
                }
              }
            }
          }
        },
        "summary" : "Delete By Id"
      }
    },
    "/api/wallets/{location}/{id}/transactions" : {
      "get" : {
        "tags" : [ "Wallet" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "location",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormatListTransaction"
                }
              }
            }
          }
        },
        "summary" : "Find Location Transactions By Id"
      }
    },
    "/api/wallets/{token}/transactions" : {
      "get" : {
        "tags" : [ "Wallet" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "0"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseFormatListTransaction"
                }
              }
            }
          }
        },
        "summary" : "Find Transactions By Token"
      }
    }
  }
}