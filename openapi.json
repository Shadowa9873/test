{
  "openapi": "3.1.0",
  "info": {
    "contact": {
      "email": "info@bladeco.com.tr",
      "name": "BLADECO YATIRIM A.Åž",
      "url": "https://www.bladeco.com.tr/"
    },
    "license": {
      "name": "BLADECO AR-GE",
      "url": "https://www.bladeco.com.tr/faaliyet/ar-ge/"
    },
    "title": "Bladeco CSMS API",
    "version": "1.0.0"
  },
  "security": [
    {
      "BearerAuth": [
        
      ]
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuthentication": {
        "type": "http",
        "description": "Authentication needed to access core application",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "SecurityScheme": {
        "type": "openIdConnect",
        "openIdConnectUrl": "http://193.111.78.145:8585/realms/bladeco-new/.well-known/openid-configuration",
        "description": "Authentication"
      }
    },
    "schemas": {
      "AddUserCarRequest": {
        "type": "object",
        "properties": {
          "vehicleModelId": {
            "$ref": "#/components/schemas/UUID"
          },
          "licensePlate": {
            "type": "string"
          }
        }
      },
      "AddVehicleRequest": {
        "type": "object",
        "properties": {
          "vehicleModelId": {
            "$ref": "#/components/schemas/UUID"
          },
          "licensePlate": {
            "type": "string"
          }
        }
      },
      "AdditionalGeoLocation": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "string"
          },
          "longitude": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/DisplayText"
          }
        }
      },
      "AdditionalGeoLocationExtension": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "string"
          },
          "longitude": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/DisplayText"
          },
          "location_id": {
            "type": "string"
          }
        }
      },
      "AuthorizationData": {
        "type": "object",
        "properties": {
          "idTag": {
            "type": "string"
          },
          "idTagInfo": {
            "$ref": "#/components/schemas/IdTagInfo"
          }
        }
      },
      "AuthorizationStatus": {
        "type": "string",
        "enum": [
          "Accepted",
          "Blocked",
          "Expired",
          "Invalid",
          "ConcurrentTx"
        ]
      },
      "AuthorizeRequest": {
        "type": "object",
        "required": [
          "idTag"
        ],
        "properties": {
          "idTag": {
            "type": "string",
            "examples": [
              "ABC123456"
            ],
            "description": "The unique identifier (idTag) to validate."
          }
        }
      },
      "AuthorizeResponse": {
        "type": "object",
        "properties": {
          "idTagInfo": {
            "$ref": "#/components/schemas/ResponseIdTagInfo"
          }
        }
      },
      "AvailabilityStatus": {
        "type": "string",
        "enum": [
          "Accepted",
          "Rejected",
          "Scheduled"
        ]
      },
      "AvailabilityType": {
        "type": "string",
        "enum": [
          "Inoperative",
          "Operative"
        ]
      },
      "BusinessDetails": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "logo": {
            "$ref": "#/components/schemas/Image"
          }
        }
      },
      "CacheConnector": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string"
          },
          "transaction": {
            "$ref": "#/components/schemas/CacheTransaction"
          }
        }
      },
      "CacheEVSEConnector": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "sessionId": {
            "$ref": "#/components/schemas/UUID"
          },
          "evseId": {
            "type": "string"
          },
          "timestampSessionStart": {
            "$ref": "#/components/schemas/ZonedDateTime"
          },
          "timestampSessionStop": {
            "$ref": "#/components/schemas/ZonedDateTime"
          },
          "connector": {
            "$ref": "#/components/schemas/CacheConnector"
          }
        }
      },
      "CacheEVSEConnectors": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "sessionId": {
            "$ref": "#/components/schemas/UUID"
          },
          "evseId": {
            "type": "string"
          },
          "timestampSessionStart": {
            "$ref": "#/components/schemas/ZonedDateTime"
          },
          "timestampSessionStop": {
            "$ref": "#/components/schemas/ZonedDateTime"
          },
          "connectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CacheConnector"
            }
          }
        }
      },
      "CacheTransaction": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "integer",
            "format": "int32"
          },
          "reservationId": {
            "type": "integer",
            "format": "int32"
          },
          "meterValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeterValue"
            }
          }
        }
      },
      "CancelReservationStatus": {
        "type": "string",
        "enum": [
          "Accepted",
          "Rejected"
        ]
      },
      "CapabilityEnum": {
        "type": "string",
        "enum": [
          "CHARGING_PROFILE_CAPABLE",
          "CHARGING_PREFERENCES_CAPABLE",
          "CHIP_CARD_SUPPORT",
          "CONTACTLESS_CARD_SUPPORT",
          "CREDIT_CARD_PAYABLE",
          "DEBIT_CARD_PAYABLE",
          "PED_TERMINAL",
          "REMOTE_START_STOP_CAPABLE",
          "RESERVABLE",
          "RFID_READER",
          "START_SESSION_CONNECTOR_REQUIRED",
          "TOKEN_GROUP_CAPABLE",
          "UNLOCK_CAPABLE"
        ]
      },
      "ChargingProfile": {
        "type": "object",
        "properties": {
          "chargingProfileId": {
            "type": "integer",
            "format": "int32"
          },
          "transactionId": {
            "type": "integer",
            "format": "int32"
          },
          "stackLevel": {
            "type": "integer",
            "format": "int32"
          },
          "chargingProfilePurpose": {
            "$ref": "#/components/schemas/ChargingProfilePurposeType"
          },
          "chargingProfileKind": {
            "$ref": "#/components/schemas/ChargingProfileKindType"
          },
          "recurrencyKind": {
            "$ref": "#/components/schemas/RecurrencyKindType"
          },
          "validFrom": {
            "$ref": "#/components/schemas/ZonedDateTime"
          },
          "validTo": {
            "$ref": "#/components/schemas/ZonedDateTime"
          },
          "chargingSchedule": {
            "$ref": "#/components/schemas/ChargingSchedule"
          }
        }
      },
      "ChargingProfileKindType": {
        "type": "string",
        "enum": [
          "Absolute",
          "Recurring",
          "Relative"
        ]
      },
      "ChargingProfilePurposeType": {
        "type": "string",
        "enum": [
          "ChargePointMaxProfile",
          "TxDefaultProfile",
          "TxProfile"
        ]
      },
      "ChargingProfileStatus": {
        "type": "string",
        "enum": [
          "Accepted",
          "Rejected",
          "NotSupported"
        ]
      },
      "ChargingRateUnitType": {
        "type": "string",
        "enum": [
          "W",
          "A"
        ]
      },
      "ChargingSchedule": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "format": "int32"
          },
          "startSchedule": {
            "$ref": "#/components/schemas/ZonedDateTime"
          },
          "chargingRateUnit": {
            "$ref": "#/components/schemas/ChargingRateUnitType"
          },
          "chargingSchedulePeriod": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargingSchedulePeriod"
            }
          },
          "minChargingRate": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ChargingSchedulePeriod": {
        "type": "object",
        "properties": {
          "startPeriod": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "number",
            "format": "double"
          },
          "numberPhases": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ChargingStation": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "evse_id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/EVSEStatusEnum"
          },
          "status_schedule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusSchedule"
            }
          },
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapabilityEnum"
            }
          },
          "connectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connector"
            }
          },
          "floor_level": {
            "type": "string"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "physical_reference": {
            "type": "string"
          },
          "directions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "parking_restrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParkingRestrictionEnum"
            }
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "last_updated": {
            "$ref": "#/components/schemas/LocalDateTime"
          }
        }
      },
      "ChargingStationExtension": {
        "type": "object",
        "properties": {
          "connectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connector"
            }
          },
          "uid": {
            "type": "string"
          },
          "evse_id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/EVSEStatusEnum"
          },
          "status_schedule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusSchedule"
            }
          },
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapabilityEnum"
            }
          },
          "floor_level": {
            "type": "string"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "physical_reference": {
            "type": "string"
          },
          "directions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "parking_restrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParkingRestrictionEnum"
            }
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "last_updated": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "model_id": {
            "$ref": "#/components/schemas/UUID"
          },
          "location_id": {
            "type": "string"
          },
          "location_name": {
            "type": "string"
          }
        }
      },
      "ChargingStatusEnum": {
        "type": "string",
        "enum": [
          "Available",
          "Preparing",
          "Charging",
          "SuspendedEVSE",
          "SuspendedEV",
          "Finishing",
          "Reserved",
          "Unavailable",
          "Faulted"
        ]
      },
      "ClearCacheStatus": {
        "type": "string",
        "enum": [
          "Accepted",
          "Rejected"
        ]
      },
      "ClearChargingProfileStatus": {
        "type": "string",
        "enum": [
          "Accepted",
          "Unknown"
        ]
      },
      "CommandResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ConfigurationStatus": {
        "type": "string",
        "enum": [
          "Accepted",
          "Rejected",
          "RebootRequired",
          "NotSupported"
        ]
      },
      "Connector": {
        "type": "object",
        "properties": {
          "uid": {
            "$ref": "#/components/schemas/UUID"
          },
          "evse_uid": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "standard": {
            "$ref": "#/components/schemas/ConnectorTypeEnum"
          },
          "format": {
            "$ref": "#/components/schemas/ConnectorFormatEnum"
          },
          "power_type": {
            "$ref": "#/components/schemas/PowerTypeEnum"
          },
          "max_voltage": {
            "type": "integer",
            "format": "int32"
          },
          "max_amperage": {
            "type": "integer",
            "format": "int32"
          },
          "max_electric_power": {
            "type": "integer",
            "format": "int32"
          },
          "tariff_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "terms_and_conditions": {
            "type": "string"
          },
          "last_updated": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "status": {
            "$ref": "#/components/schemas/ChargingStatusEnum"
          }
        }
      },
      "ConnectorExtension": {
        "type": "object",
        "properties": {
          "uid": {
            "$ref": "#/components/schemas/UUID"
          },
          "evse_uid": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "standard": {
            "$ref": "#/components/schemas/ConnectorTypeEnum"
          },
          "format": {
            "$ref": "#/components/schemas/ConnectorFormatEnum"
          },
          "power_type": {
            "$ref": "#/components/schemas/PowerTypeEnum"
          },
          "max_voltage": {
            "type": "integer",
            "format": "int32"
          },
          "max_amperage": {
            "type": "integer",
            "format": "int32"
          },
          "max_electric_power": {
            "type": "integer",
            "format": "int32"
          },
          "tariff_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "terms_and_conditions": {
            "type": "string"
          },
          "last_updated": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "status": {
            "$ref": "#/components/schemas/ChargingStatusEnum"
          },
          "connector_name": {
            "type": "string"
          },
          "active_tariff": {
            "$ref": "#/components/schemas/TariffDto"
          },
          "image_url": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ConnectorFormatEnum": {
        "type": "string",
        "enum": [
          "SOCKET",
          "CABLE"
        ]
      },
      "ConnectorModelDto": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "connector_codes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectorFormatEnum"
            }
          },
          "connector_name": {
            "type": "string"
          },
          "standard": {
            "type": "string"
          },
          "maximum_output_amperage": {
            "type": "integer",
            "format": "int32"
          },
          "maximum_output_kwh": {
            "type": "string"
          },
          "supported_currents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PowerTypeEnum"
            }
          },
          "image_url": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ConnectorModelDtoExtension": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "connector_name": {
            "type": "string"
          },
          "standard": {
            "type": "string"
          },
          "maximum_output_amperage": {
            "type": "integer",
            "format": "int32"
          },
          "maximum_output_kwh": {
            "type": "string"
          },
          "supported_currents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PowerTypeEnum"
            }
          },
          "image_url": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "formats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectorFormatEnum"
            }
          }
        }
      },
      "ConnectorModelFullRequest": {
        "type": "object",
        "properties": {
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            },
            "description": "Images to upload"
          },
          "metadata": {
            "$ref": "#/components/schemas/ConnectorModelDtoExtension"
          }
        }
      },
      "ConnectorModelInstanceDto": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "connector_code": {
            "$ref": "#/components/schemas/ConnectorFormatEnum"
          },
          "supported_current": {
            "$ref": "#/components/schemas/PowerTypeEnum"
          },
          "maximum_output_amperage": {
            "type": "integer",
            "format": "int32"
          },
          "maximum_output_kwh": {
            "type": "string"
          },
          "connector_model_id": {
            "$ref": "#/components/schemas/UUID"
          }
        }
      },
      "ConnectorModelInstanceExtension": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "connector_code": {
            "$ref": "#/components/schemas/ConnectorFormatEnum"
          },
          "supported_current": {
            "$ref": "#/components/schemas/PowerTypeEnum"
          },
          "maximum_output_amperage": {
            "type": "integer",
            "format": "int32"
          },
          "maximum_output_kwh": {
            "type": "string"
          },
          "connector_model_id": {
            "$ref": "#/components/schemas/UUID"
          },
          "connector_model": {
            "$ref": "#/components/schemas/ConnectorModelDto"
          }
        }
      },
      "ConnectorModelInstanceListResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "pageCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectorModelInstanceExtension"
            }
          }
        }
      },
      "ConnectorModelListResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "pageCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectorModelDto"
            }
          }
        }
      },
      "ConnectorTypeEnum": {
        "type": "string",
        "enum": [
          "CHADEMO",
          "CHAOJI",
          "DOMESTIC_A",
          "DOMESTIC_B",
          "DOMESTIC_C",
          "DOMESTIC_D",
          "DOMESTIC_E",
          "DOMESTIC_F",
          "DOMESTIC_G",
          "DOMESTIC_H",
          "DOMESTIC_I",
          "DOMESTIC_J",
          "DOMESTIC_K",
          "DOMESTIC_L",
          "DOMESTIC_M",
          "DOMESTIC_N",
          "DOMESTIC_O",
          "GBT_AC",
          "GBT_DC",
          "IEC_60309_2_single_16",
          "IEC_60309_2_three_16",
          "IEC_60309_2_three_32",
          "IEC_60309_2_three_64",
          "IEC_62196_T1",
          "IEC_62196_T1_COMBO",
          "IEC_62196_T2",
          "IEC_62196_T2_COMBO",
          "IEC_62196_T3A",
          "IEC_62196_T3C",
          "NEMA_5_20",
          "NEMA_6_30",
          "NEMA_6_50",
          "NEMA_10_30",
          "NEMA_10_50",
          "NEMA_14_30",
          "NEMA_14_50",
          "PANTOGRAPH_BOTTOM_UP",
          "PANTOGRAPH_TOP_DOWN",
          "TESLA_R",
          "TESLA_S"
        ]
      },
      "CountResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreateNotificationRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "related_id": {
            "type": "string"
          },
          "user_id": {
            "$ref": "#/components/schemas/UUID"
          }
        }
      },
      "CsmsCancelReservationRequest": {
        "type": "object",
        "properties": {
          "ocppMessageId": {
            "type": "string"
          },
          "reservationId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CsmsCancelReservationResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/CancelReservationStatus"
          }
        }
      },
      "CsmsChangeAvailabilityRequest": {
        "type": "object",
        "properties": {
          "ocppMessageId": {
            "type": "string"
          },
          "connectorId": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/AvailabilityType"
          }
        }
      },
      "CsmsChangeAvailabilityResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/AvailabilityStatus"
          }
        }
      },
      "CsmsChangeConfigurationRequest": {
        "type": "object",
        "properties": {
          "ocppMessageId": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "CsmsChangeConfigurationResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ConfigurationStatus"
          }
        }
      },
      "CsmsClearCacheRequest": {
        "type": "object",
        "properties": {
          "ocppMessageId": {
            "type": "string"
          }
        }
      },
      "CsmsClearCacheResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ClearCacheStatus"
          }
        }
      },
      "CsmsClearChargingProfileRequest": {
        "type": "object",
        "properties": {
          "ocppMessageId": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "connectorId": {
            "type": "integer",
            "format": "int32"
          },
          "chargingProfilePurpose": {
            "$ref": "#/components/schemas/ChargingProfilePurposeType"
          },
          "stackLevel": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CsmsClearChargingProfileResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ClearChargingProfileStatus"
          }
        }
      },
      "CsmsCommandResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "data": {
            "$ref": "#/components/schemas/CommandResponse"
          },
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          }
        }
      },
      "CsmsDataTransferRequest": {
        "type": "object",
        "properties": {
          "ocppMessageId": {
            "type": "string"
          },
          "vendorId": {
            "type": "string"
          },
          "messageId": {
            "type": "string"
          },
          "data": {
            "type": "string"
          }
        }
      },
      "CsmsDataTransferResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DataTransferStatus"
          },
          "data": {
            "type": "string"
          }
        }
      },
      "CsmsGetCompositeScheduleRequest": {
        "type": "object",
        "properties": {
          "ocppMessageId": {
            "type": "string"
          },
          "connectorId": {
            "type": "integer",
            "format": "int32"
          },
          "duration": {
            "type": "integer",
            "format": "int32"
          },
          "chargingRateUnit": {
            "$ref": "#/components/schemas/ChargingRateUnitType"
          }
        }
      },
      "CsmsGetCompositeScheduleResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/GetCompositeScheduleStatus"
          },
          "connectorId": {
            "type": "integer",
            "format": "int32"
          },
          "scheduleStart": {
            "$ref": "#/components/schemas/ZonedDateTime"
          },
          "chargingSchedule": {
            "$ref": "#/components/schemas/ChargingSchedule"
          }
        }
      },
      "CsmsGetConfigurationRequest": {
        "type": "object",
        "properties": {
          "ocppMessageId": {
            "type": "string"
          },
          "key": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CsmsGetConfigurationResponse": {
        "type": "object",
        "properties": {
          "configurationKey": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyValueType"
            }
          },
          "unknownKey": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CsmsGetDiagnosticsRequest": {
        "type": "object",
        "properties": {
          "ocppMessageId": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "retries": {
            "type": "integer",
            "format": "int32"
          },
          "retryInterval": {
            "type": "integer",
            "format": "int32"
          },
          "startTime": {
            "$ref": "#/components/schemas/ZonedDateTime"
          },
          "stopTime": {
            "$ref": "#/components/schemas/ZonedDateTime"
          }
        }
      },
      "CsmsGetDiagnosticsResponse": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string"
          }
        }
      },
      "CsmsGetLocalListVersionRequest": {
        "type": "object",
        "properties": {
          "ocppMessageId": {
            "type": "string"
          }
        }
      },
      "CsmsGetLocalListVersionResponse": {
        "type": "object",
        "properties": {
          "listVersion": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CsmsReserveNowRequest": {
        "type": "object",
        "properties": {
          "ocppMessageId": {
            "type": "string"
          },
          "connectorId": {
            "type": "integer",
            "format": "int32"
          },
          "expiryDate": {
            "$ref": "#/components/schemas/ZonedDateTime"
          },
          "idTag": {
            "type": "string"
          },
          "parentIdTag": {
            "type": "string"
          },
          "reservationId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CsmsReserveNowResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ReservationStatus"
          }
        }
      },
      "CsmsResetRequest": {
        "type": "object",
        "properties": {
          "ocppMessageId": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ResetType"
          }
        }
      },
      "CsmsResetResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ResetStatus"
          }
        }
      },
      "CsmsSendLocalListRequest": {
        "type": "object",
        "properties": {
          "ocppMessageId": {
            "type": "string"
          },
          "listVersion": {
            "type": "integer",
            "format": "int32"
          },
          "localAuthorizationList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorizationData"
            }
          },
          "updateType": {
            "$ref": "#/components/schemas/UpdateType"
          }
        }
      },
      "CsmsSendLocalListResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/UpdateStatus"
          }
        }
      },
      "CsmsSetChargingProfileRequest": {
        "type": "object",
        "properties": {
          "ocppMessageId": {
            "type": "string"
          },
          "connectorId": {
            "type": "integer",
            "format": "int32"
          },
          "csChargingProfiles": {
            "$ref": "#/components/schemas/ChargingProfile"
          }
        }
      },
      "CsmsSetChargingProfileResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ChargingProfileStatus"
          }
        }
      },
      "CsmsTriggerMessageRequest": {
        "type": "object",
        "properties": {
          "ocppMessageId": {
            "type": "string"
          },
          "connectorId": {
            "type": "integer",
            "format": "int32"
          },
          "requestedMessage": {
            "$ref": "#/components/schemas/TriggerMessageRequestType"
          }
        }
      },
      "CsmsTriggerMessageResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/TriggerMessageStatus"
          }
        }
      },
      "CsmsUnlockConnectorRequest": {
        "type": "object",
        "properties": {
          "ocppMessageId": {
            "type": "string"
          },
          "connectorId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CsmsUnlockConnectorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/UnlockStatus"
          }
        }
      },
      "CsmsUpdateFirmwareRequest": {
        "type": "object",
        "properties": {
          "ocppMessageId": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "retries": {
            "type": "integer",
            "format": "int32"
          },
          "retrieveDate": {
            "$ref": "#/components/schemas/ZonedDateTime"
          },
          "retryInterval": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CsmsUpdateFirmwareResponse": {
        "type": "object"
      },
      "CsmsWalletListResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletResponse"
            }
          },
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          }
        }
      },
      "CsmsWalletResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "data": {
            "$ref": "#/components/schemas/WalletResponse"
          },
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          }
        }
      },
      "DashboardData": {
        "type": "object",
        "properties": {
          "locationName": {
            "type": "string"
          },
          "periodKwh": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "totalKwh": {
            "type": "number",
            "format": "double"
          },
          "periodIncome": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            }
          },
          "totalIncome": {
            "type": "number"
          }
        }
      },
      "DashboardResponse": {
        "type": "object",
        "properties": {
          "all_evses_count": {
            "type": "integer",
            "format": "int64"
          },
          "active_evses_count": {
            "type": "integer",
            "format": "int64"
          },
          "all_connectors_count": {
            "type": "integer",
            "format": "int64"
          },
          "active_connectors_count": {
            "type": "integer",
            "format": "int64"
          },
          "user_count": {
            "type": "integer",
            "format": "int64"
          },
          "location_data_map": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DashboardData"
            }
          }
        }
      },
      "DataModel": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "evse_id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/EVSEStatusEnum"
          },
          "status_schedule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusSchedule"
            }
          },
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapabilityEnum"
            }
          },
          "connectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectorExtension"
            }
          },
          "floor_level": {
            "type": "string"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "physical_reference": {
            "type": "string"
          },
          "directions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "parking_restrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParkingRestrictionEnum"
            }
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "last_updated": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "model_id": {
            "$ref": "#/components/schemas/UUID"
          },
          "location_id": {
            "type": "string"
          },
          "location_name": {
            "type": "string"
          }
        }
      },
      "DataModel1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "party_id": {
            "type": "string"
          },
          "time_zone": {
            "type": "string"
          },
          "parking_type": {
            "$ref": "#/components/schemas/ParkingTypeEnum"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "operator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "suboperator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "owner": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "evses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataModel"
            }
          },
          "related_locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalGeoLocationExtension"
            }
          },
          "directions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "facilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacilityEnum"
            }
          },
          "opening_times": {
            "$ref": "#/components/schemas/Hours"
          },
          "charging_when_closed": {
            "type": "boolean"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          },
          "publish": {
            "type": "boolean"
          },
          "publish_allowed_to": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublishTokenType"
            }
          },
          "last_updated": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "image_urls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ibans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IbanDto"
            }
          }
        }
      },
      "DataTransferStatus": {
        "type": "string",
        "enum": [
          "Accepted",
          "Rejected",
          "UnknownMessageId",
          "UnknownVendorId"
        ]
      },
      "DayOfWeekEnum": {
        "type": "string",
        "enum": [
          "MONDAY",
          "TUESDAY",
          "WEDNESDAY",
          "THURSDAY",
          "FRIDAY",
          "SATURDAY",
          "SUNDAY"
        ]
      },
      "DeleteLocationUserRelationResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "data": {
            "type": "boolean"
          },
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          }
        }
      },
      "DisplayText": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "EVSEStatusEnum": {
        "type": "string",
        "enum": [
          "AVAILABLE",
          "BLOCKED",
          "CHARGING",
          "INOPERATIVE",
          "OUTOFORDER",
          "PLANNED",
          "REMOVED",
          "RESERVED",
          "UNKNOWN"
        ]
      },
      "EnergyMix": {
        "type": "object",
        "properties": {
          "is_green_energy": {
            "type": "boolean"
          },
          "energy_sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnergySource"
            }
          },
          "environ_impact": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentalImpact"
            }
          },
          "supplier_name": {
            "type": "string"
          },
          "energy_product_name": {
            "type": "string"
          }
        }
      },
      "EnergySource": {
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/EnergySourceCategoryEnum"
          },
          "percentage": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "EnergySourceCategoryEnum": {
        "type": "string",
        "enum": [
          "NUCLEAR",
          "GENERAL_FOSSIL",
          "COAL",
          "GAS",
          "GENERAL_GREEN",
          "SOLAR",
          "WIND",
          "WATER"
        ]
      },
      "EnvironmentalImpact": {
        "type": "object",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/EnvironmentalImpactCategoryEnum"
          },
          "amount": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "EnvironmentalImpactCategoryEnum": {
        "type": "string",
        "enum": [
          "NUCLEAR_WASTE",
          "CARBON_DIOXIDE"
        ]
      },
      "ExceptionalPeriod": {
        "type": "object",
        "properties": {
          "period_begin": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "period_end": {
            "$ref": "#/components/schemas/LocalDateTime"
          }
        }
      },
      "FacilityEnum": {
        "type": "string",
        "enum": [
          "HOTEL",
          "RESTAURANT",
          "CAFE",
          "MALL",
          "SUPERMARKET",
          "SPORT",
          "RECREATION_AREA",
          "NATURE",
          "MUSEUM",
          "BIKE_SHARING",
          "BUS_STOP",
          "TAXI_STAND",
          "TRAM_STOP",
          "METRO_STATION",
          "TRAIN_STATION",
          "AIRPORT",
          "PARKING_LOT",
          "CARPOOL_PARKING",
          "FUEL_STATION",
          "WIFI"
        ]
      },
      "GeoLocation": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "string"
          },
          "longitude": {
            "type": "string"
          }
        }
      },
      "GetChargingStationResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "data": {
            "$ref": "#/components/schemas/DataModel"
          },
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          }
        }
      },
      "GetChargingStationsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "pageCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataModel"
            }
          }
        }
      },
      "GetCompositeScheduleStatus": {
        "type": "string",
        "enum": [
          "Accepted",
          "Rejected"
        ]
      },
      "GetConnectorResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "data": {
            "$ref": "#/components/schemas/ConnectorExtension"
          },
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          }
        }
      },
      "GetDashboardResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "data": {
            "$ref": "#/components/schemas/DashboardResponse"
          },
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          }
        }
      },
      "GetLocationResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "data": {
            "$ref": "#/components/schemas/DataModel1"
          },
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          }
        }
      },
      "GetLocationTransactionsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "pageCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDto"
            }
          }
        }
      },
      "GetLocationUserRelationResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "data": {
            "type": "boolean"
          },
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          }
        }
      },
      "GetLocationUsersResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublishTokenType"
            }
          },
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          }
        }
      },
      "GetLocationsResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataModel1"
            }
          },
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "unconfirmed_locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataModel1"
            }
          }
        }
      },
      "GetPaginatedAllTransactionsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "pageCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDto"
            }
          }
        }
      },
      "GetPaginatedLocationsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "pageCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataModel1"
            }
          }
        }
      },
      "GetPaginatedTariffsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "pageCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TariffDto"
            }
          }
        }
      },
      "GetPaginatedUserTransactionHistoryResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "pageCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDto"
            }
          }
        }
      },
      "GetStationTransactionsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "pageCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDto"
            }
          }
        }
      },
      "GetTransactionsResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MoneyTransactionResponse"
            }
          },
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          }
        }
      },
      "GetUserActiveTransactionsResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDto"
            }
          },
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          }
        }
      },
      "Hours": {
        "type": "object",
        "properties": {
          "twentyfourseven": {
            "type": "boolean"
          },
          "regular_hours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegularHours"
            }
          },
          "exceptional_openings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExceptionalPeriod"
            }
          },
          "exceptional_closings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExceptionalPeriod"
            }
          }
        }
      },
      "IbanDto": {
        "type": "object",
        "properties": {
          "iban": {
            "type": "string"
          },
          "entity_id": {
            "type": "string"
          },
          "bank": {
            "type": "string"
          },
          "owner_name": {
            "type": "string"
          }
        }
      },
      "IdTagInfo": {
        "type": "object",
        "properties": {
          "expiryDate": {
            "$ref": "#/components/schemas/ZonedDateTime"
          },
          "parentIdTag": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/AuthorizationStatus"
          }
        }
      },
      "IdTagInfoEnum": {
        "type": "string",
        "enum": [
          "Accepted",
          "Blocked",
          "Expired",
          "Invalid",
          "ConcurrentTx"
        ]
      },
      "IdTagStatusEnum": {
        "type": "string",
        "enum": [
          "Active",
          "Blocked",
          "Expired",
          "Deleted"
        ]
      },
      "Image": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "thumbnail": {
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/ImageCategoryEnum"
          },
          "type": {
            "type": "string"
          },
          "width": {
            "type": "string"
          },
          "height": {
            "type": "string"
          }
        }
      },
      "ImageCategoryEnum": {
        "type": "string",
        "enum": [
          "CHARGER",
          "ENTRANCE",
          "LOCATION",
          "NETWORK",
          "OPERATOR",
          "OTHER",
          "OWNER"
        ]
      },
      "IncomePeriodType": {
        "type": "string",
        "enum": [
          "TODAY",
          "THIS_WEEK",
          "THIS_MONTH",
          "LAST_30_DAYS",
          "LAST_90_DAYS"
        ]
      },
      "IysListEnum": {
        "type": "string",
        "enum": [
          "BIREYSEL",
          "TACIR"
        ]
      },
      "KeyValueType": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "readonly": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "KwhPeriodType": {
        "type": "string",
        "enum": [
          "THIS_WEEK",
          "LAST_WEEK"
        ]
      },
      "LocalDate": {
        "type": "string",
        "format": "date",
        "examples": [
          "2022-03-10"
        ]
      },
      "LocalDateTime": {
        "type": "string",
        "format": "date-time",
        "examples": [
          "2022-03-10T12:15:50"
        ]
      },
      "Location": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "party_id": {
            "type": "string"
          },
          "time_zone": {
            "type": "string"
          },
          "parking_type": {
            "$ref": "#/components/schemas/ParkingTypeEnum"
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "operator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "suboperator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "owner": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "evses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargingStation"
            }
          },
          "related_locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalGeoLocation"
            }
          },
          "directions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "facilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacilityEnum"
            }
          },
          "opening_times": {
            "$ref": "#/components/schemas/Hours"
          },
          "charging_when_closed": {
            "type": "boolean"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          },
          "publish": {
            "type": "boolean"
          },
          "publish_allowed_to": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublishTokenType"
            }
          },
          "last_updated": {
            "$ref": "#/components/schemas/LocalDateTime"
          }
        }
      },
      "LocationEnum": {
        "type": "string",
        "enum": [
          "Body",
          "Cable",
          "EV",
          "Inlet",
          "Outlet"
        ]
      },
      "LocationFullRequest": {
        "type": "object",
        "properties": {
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            },
            "description": "Images to upload"
          },
          "metadata": {
            "$ref": "#/components/schemas/LocationPutRequest"
          }
        }
      },
      "LocationPutRequest": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "iban": {
            "$ref": "#/components/schemas/IbanDto"
          }
        }
      },
      "LogDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "evseId": {
            "type": "string"
          },
          "timestamp": {
            "$ref": "#/components/schemas/ZonedDateTime"
          },
          "sessionId": {
            "$ref": "#/components/schemas/UUID"
          },
          "log": {
            
          }
        }
      },
      "Message": {
        "type": "object",
        "required": [
          "text",
          "receipents"
        ],
        "properties": {
          "text": {
            "type": "string"
          },
          "receipents": {
            "$ref": "#/components/schemas/Recipients"
          }
        }
      },
      "MeterValue": {
        "type": "object",
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/ZonedDateTime"
          },
          "sampledValue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SampledValue"
            }
          }
        }
      },
      "MoneyTransactionRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "amount": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "$ref": "#/components/schemas/ZonedDateTime"
          },
          "referenceNumber": {
            "$ref": "#/components/schemas/UUID"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "location": {
            "type": "string"
          },
          "from_wallet": {
            "type": "integer",
            "format": "int64"
          },
          "to_wallet": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/TransactionType"
          }
        }
      },
      "MoneyTransactionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "amount": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "$ref": "#/components/schemas/ZonedDateTime"
          },
          "referenceNumber": {
            "$ref": "#/components/schemas/UUID"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "location": {
            "type": "string"
          },
          "from_wallet": {
            "$ref": "#/components/schemas/WalletCpoRequest"
          },
          "to_wallet": {
            "$ref": "#/components/schemas/WalletCpoRequest"
          },
          "type": {
            "$ref": "#/components/schemas/TransactionType"
          }
        }
      },
      "NotificationDto": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "message": {
            "type": "string"
          },
          "related_id": {
            "type": "string"
          },
          "user_id": {
            "$ref": "#/components/schemas/UUID"
          },
          "is_read": {
            "type": "boolean"
          },
          "location_id": {
            "type": "string"
          }
        }
      },
      "NotifyAdminsRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "related_id": {
            "type": "string"
          },
          "location_id": {
            "type": "string"
          }
        }
      },
      "PaginatedConnectorsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "pageCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectorExtension"
            }
          }
        }
      },
      "PaginatedCsmsWalletResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "pageCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletResponse"
            }
          }
        }
      },
      "PaginatedLogsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "pageCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogDto"
            }
          }
        }
      },
      "PaginatedMoneyTransactionResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "pageCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MoneyTransactionResponse"
            }
          }
        }
      },
      "ParkingRestrictionEnum": {
        "type": "string",
        "enum": [
          "EV_ONLY",
          "PLUGGED",
          "DISABLED",
          "CUSTOMERS",
          "MOTORCYCLES"
        ]
      },
      "ParkingTypeEnum": {
        "type": "string",
        "enum": [
          "ALONG_MOTORWAY",
          "PARKING_GARAGE",
          "PARKING_LOT",
          "ON_DRIVEWAY",
          "ON_STREET",
          "UNDERGROUND_GARAGE"
        ]
      },
      "PowerTypeEnum": {
        "type": "string",
        "enum": [
          "AC_1_PHASE",
          "AC_2_PHASE",
          "AC_2_PHASE_SPLIT",
          "AC_3_PHASE",
          "DC"
        ]
      },
      "Price": {
        "type": "object",
        "properties": {
          "excl_vat": {
            "type": "number",
            "format": "float"
          },
          "incl_vat": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "PriceComponent": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/TariffDimensionTypeEnum"
          },
          "price": {
            "type": "number",
            "format": "float"
          },
          "vat": {
            "type": "number",
            "format": "float"
          },
          "step_size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "examples": [
              "https://example.com/probs/forbidden"
            ],
            "description": "A URI reference that identifies the problem type."
          },
          "title": {
            "type": "string",
            "examples": [
              "Forbidden"
            ],
            "description": "A short summary of the problem."
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "examples": [
              403
            ],
            "description": "The HTTP status code generated by the origin server."
          },
          "detail": {
            "type": "string",
            "examples": [
              "The idTag is blocked or expired."
            ],
            "description": "A human-readable explanation specific to this occurrence of the problem."
          },
          "instance": {
            "type": "string",
            "examples": [
              "/chargingstation/authorize"
            ],
            "description": "A URI reference that identifies the specific occurrence of the problem."
          },
          "data": {
            "type": "object",
            "examples": [
              {
                "missingFields": [
                  "idTag"
                ],
                "validationErrors": {
                  "idTag": "idTag format is invalid."
                }
              }
            ],
            "additionalProperties": {
              
            },
            "description": "Additional data related to the error to provide more context."
          }
        }
      },
      "PublishTokenType": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/TokenTypeEnum1"
          },
          "visual_number": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "group_id": {
            "type": "string"
          }
        }
      },
      "PutLocationUserRelationResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "data": {
            "type": "boolean"
          },
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          }
        }
      },
      "PutTariffRequest": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/TariffTypeEnum"
          },
          "tariff_alt_text": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "tariff_alt_url": {
            "type": "string"
          },
          "min_price": {
            "$ref": "#/components/schemas/Price"
          },
          "max_price": {
            "$ref": "#/components/schemas/Price"
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TariffElement"
            }
          },
          "start_date_time": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "end_date_time": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          },
          "country_code": {
            "type": "string"
          },
          "party_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_updated": {
            "$ref": "#/components/schemas/LocalDateTime"
          }
        }
      },
      "ReasonEnum": {
        "type": "string",
        "enum": [
          "EmergencyStop",
          "EVDisconnected",
          "HardReset",
          "Local",
          "Other",
          "PowerLoss",
          "Reboot",
          "Remote",
          "SoftReset",
          "UnlockCommand",
          "DeAuthorized"
        ]
      },
      "Recipients": {
        "type": "object",
        "required": [
          "number"
        ],
        "properties": {
          "number": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RecurrencyKindType": {
        "type": "string",
        "enum": [
          "Daily",
          "Weekly"
        ]
      },
      "RegularHours": {
        "type": "object",
        "properties": {
          "weekday": {
            "type": "integer",
            "format": "int32"
          },
          "period_begin": {
            "type": "string"
          },
          "period_end": {
            "type": "string"
          }
        }
      },
      "ReservationRestrictionTypeEnum": {
        "type": "string",
        "enum": [
          "RESERVATION",
          "RESERVATION_EXPIRES"
        ]
      },
      "ReservationStatus": {
        "type": "string",
        "enum": [
          "Accepted",
          "Faulted",
          "Occupied",
          "Rejected",
          "Unavailable"
        ]
      },
      "ResetStatus": {
        "type": "string",
        "enum": [
          "Accepted",
          "Rejected"
        ]
      },
      "ResetType": {
        "type": "string",
        "enum": [
          "Hard",
          "Soft"
        ]
      },
      "ResponseIdTagInfo": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/IdTagInfoEnum",
            "type": "string",
            "examples": [
              "Accepted"
            ],
            "description": "Status of the idTag authorization."
          },
          "expiryDate": {
            "$ref": "#/components/schemas/LocalDateTime",
            "type": "string",
            "examples": [
              "2024-07-01T00:00Z"
            ],
            "description": "Expiry date of the idTag (if applicable)."
          },
          "parentIdTag": {
            "type": "string",
            "examples": [
              "PARENT123"
            ],
            "description": "Parent idTag if applicable."
          }
        }
      },
      "SampledValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "format": {
            "$ref": "#/components/schemas/ValueFormat"
          },
          "measurand": {
            "type": "string"
          },
          "phase": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/LocationEnum"
          },
          "unit": {
            "type": "string"
          }
        }
      },
      "SessionStatusEnum": {
        "type": "string",
        "enum": [
          "Accepted",
          "Rejected"
        ]
      },
      "SmsSendRequest": {
        "type": "object",
        "required": [
          "iys",
          "message"
        ],
        "properties": {
          "send_date_time": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time",
              "examples": [
                "2022-03-10T12:15:50"
              ]
            }
          },
          "iys": {
            "type": "boolean"
          },
          "iys_list": {
            "$ref": "#/components/schemas/IysListEnum"
          },
          "message": {
            "$ref": "#/components/schemas/Message"
          }
        }
      },
      "StartTransactionResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/SessionStatusEnum"
          },
          "completedHandler": {
            
          }
        }
      },
      "StationModelDto": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "brand": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "product_group": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "material": {
            "type": "string"
          },
          "ocpp_protocol": {
            "type": "string"
          },
          "connector_model_instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectorModelInstanceExtension"
            }
          },
          "image_urls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "StationModelFullRequest": {
        "type": "object",
        "properties": {
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            },
            "description": "Images to upload"
          },
          "metadata": {
            "$ref": "#/components/schemas/StationModelDto"
          }
        }
      },
      "StationModelListResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "pageCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StationModelDto"
            }
          }
        }
      },
      "StatusSchedule": {
        "type": "object",
        "properties": {
          "period_begin": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "period_end": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "status": {
            "$ref": "#/components/schemas/EVSEStatusEnum"
          }
        }
      },
      "StopTransactionRequest": {
        "type": "object",
        "required": [
          "transactionId"
        ],
        "properties": {
          "transactionId": {
            "type": "integer",
            "format": "int32",
            "examples": [
              1001
            ],
            "description": "Unique identifier for the charging session."
          },
          "ocppMessageId": {
            "type": "string"
          }
        }
      },
      "StopTransactionResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/SessionStatusEnum"
          },
          "completedHandler": {
            
          }
        }
      },
      "TariffDimensionTypeEnum": {
        "type": "string",
        "enum": [
          "ENERGY",
          "FLAT",
          "PARKING_TIME",
          "TIME"
        ]
      },
      "TariffDto": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/TariffTypeEnum"
          },
          "tariff_alt_text": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "tariff_alt_url": {
            "type": "string"
          },
          "min_price": {
            "$ref": "#/components/schemas/Price"
          },
          "max_price": {
            "$ref": "#/components/schemas/Price"
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TariffElement"
            }
          },
          "start_date_time": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "end_date_time": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          },
          "country_code": {
            "type": "string"
          },
          "party_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_updated": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "TariffElement": {
        "type": "object",
        "properties": {
          "price_components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceComponent"
            }
          },
          "restrictions": {
            "$ref": "#/components/schemas/TariffRestrictions"
          }
        }
      },
      "TariffRestrictions": {
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string"
          },
          "end_time": {
            "type": "string"
          },
          "start_date": {
            "type": "string"
          },
          "end_date": {
            "type": "string"
          },
          "min_kwh": {
            "type": "number",
            "format": "float"
          },
          "max_kwh": {
            "type": "number",
            "format": "float"
          },
          "min_current": {
            "type": "number",
            "format": "float"
          },
          "max_current": {
            "type": "number",
            "format": "float"
          },
          "min_power": {
            "type": "number",
            "format": "float"
          },
          "max_power": {
            "type": "number",
            "format": "float"
          },
          "min_duration": {
            "type": "integer",
            "format": "int32"
          },
          "max_duration": {
            "type": "integer",
            "format": "int32"
          },
          "day_of_week": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeekEnum"
            }
          },
          "reservation": {
            "$ref": "#/components/schemas/ReservationRestrictionTypeEnum"
          }
        }
      },
      "TariffTypeEnum": {
        "type": "string",
        "enum": [
          "AD_HOC_PAYMENT",
          "PROFILE_CHEAP",
          "PROFILE_FAST",
          "REGULAR",
          "PROFILE_GREEN"
        ]
      },
      "TokenRequest": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "The username of the user."
          },
          "password": {
            "type": "string",
            "description": "The password of the user."
          }
        }
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The access token for authentication."
          },
          "refresh_token": {
            "type": "string",
            "description": "The refresh token for re-authentication."
          },
          "expires_in": {
            "type": "integer",
            "format": "int64",
            "description": "The expiration time of the access token in seconds."
          },
          "token_type": {
            "$ref": "#/components/schemas/TokenTypeEnum",
            "type": "string",
            "description": "The type of the token (usually Bearer)."
          }
        }
      },
      "TokenTypeEnum": {
        "type": "string",
        "enum": [
          "Bearer"
        ]
      },
      "TokenTypeEnum1": {
        "type": "string",
        "enum": [
          "AD_HOC_USER",
          "APP_USER",
          "OTHER",
          "RFID"
        ]
      },
      "TransactionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "session_id": {
            "$ref": "#/components/schemas/UUID"
          },
          "evse_id": {
            "type": "string"
          },
          "connector_id": {
            "type": "integer",
            "format": "int32"
          },
          "reservation_id": {
            "type": "integer",
            "format": "int32"
          },
          "start_id_tag": {
            "type": "string"
          },
          "stop_id_tag": {
            "type": "string"
          },
          "meter_start": {
            "type": "integer",
            "format": "int32"
          },
          "meter_stop": {
            "type": "integer",
            "format": "int32"
          },
          "timestamp_start": {
            "$ref": "#/components/schemas/ZonedDateTime"
          },
          "timestamp_stop": {
            "$ref": "#/components/schemas/ZonedDateTime"
          },
          "transaction_data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeterValue"
            }
          },
          "reason": {
            "$ref": "#/components/schemas/ReasonEnum"
          },
          "connector_uid": {
            "$ref": "#/components/schemas/UUID"
          },
          "location_name": {
            "type": "string"
          },
          "location_id": {
            "type": "string"
          }
        }
      },
      "TransactionStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "SUCCESS",
          "ERROR"
        ]
      },
      "TransactionType": {
        "type": "string",
        "enum": [
          "TRANSFER",
          "PAYMENT",
          "INITIAL"
        ]
      },
      "TriggerMessageRequestType": {
        "type": "string",
        "enum": [
          "BootNotification",
          "DiagnosticsStatusNotification",
          "FirmwareStatusNotification",
          "Heartbeat",
          "MeterValues",
          "StatusNotification"
        ]
      },
      "TriggerMessageStatus": {
        "type": "string",
        "enum": [
          "Accepted",
          "Rejected",
          "NotImplemented"
        ]
      },
      "UUID": {
        "type": "string",
        "format": "uuid",
        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
      },
      "UnlockStatus": {
        "type": "string",
        "enum": [
          "Unlocked",
          "UnlockFailed",
          "NotSupported"
        ]
      },
      "UpdateIdTagRequest": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/IdTagStatusEnum",
            "type": "string",
            "examples": [
              "Active"
            ],
            "description": "New status of the idTag."
          },
          "expiryDate": {
            "$ref": "#/components/schemas/LocalDateTime",
            "type": "string",
            "examples": [
              "2025-12-31T23:59:59Z"
            ],
            "description": "The new expiration date of the idTag."
          }
        }
      },
      "UpdateIdTagResponse": {
        "type": "object",
        "required": [
          "idTag",
          "status",
          "expiryDate",
          "message"
        ],
        "properties": {
          "idTag": {
            "type": "string",
            "examples": [
              "ABC123456"
            ],
            "description": "Unique identifier (RFID or token) of the idTag."
          },
          "status": {
            "$ref": "#/components/schemas/IdTagStatusEnum",
            "type": "string",
            "examples": [
              "Active"
            ],
            "description": "Updated status of the idTag."
          },
          "expiryDate": {
            "$ref": "#/components/schemas/LocalDateTime",
            "type": "string",
            "examples": [
              "2025-12-31T23:59:59Z"
            ],
            "description": "Updated expiration date of the idTag."
          },
          "message": {
            "type": "string",
            "examples": [
              "idTag updated successfully"
            ],
            "description": "Confirmation message for the operation."
          }
        }
      },
      "UpdateStatus": {
        "type": "string",
        "enum": [
          "Accepted",
          "Failed",
          "NotSupported",
          "VersionMismatch"
        ]
      },
      "UpdateType": {
        "type": "string",
        "enum": [
          "Differential",
          "Full"
        ]
      },
      "UserCarDto": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "userId": {
            "$ref": "#/components/schemas/UUID"
          },
          "vehicleId": {
            "$ref": "#/components/schemas/UUID"
          },
          "favourite": {
            "type": "boolean"
          }
        }
      },
      "UserCarGetResponse": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "licensePlate": {
            "type": "string"
          },
          "isFavorite": {
            "type": "boolean"
          },
          "vehicleModel": {
            "$ref": "#/components/schemas/VehicleModelDto"
          },
          "favorite": {
            "type": "boolean"
          }
        }
      },
      "UserCreateRequest": {
        "type": "object",
        "required": [
          "firstName",
          "lastName",
          "email",
          "password",
          "phoneNumber"
        ],
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The user's first name"
          },
          "lastName": {
            "type": "string",
            "description": "The user's last name"
          },
          "email": {
            "type": "string",
            "description": "The user's email address"
          },
          "password": {
            "type": "string",
            "description": "The user's password"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The user's phone number"
          }
        }
      },
      "UserCreateResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "$ref": "#/components/schemas/UUID",
            "type": "string",
            "description": "The unique ID of the created user"
          },
          "firstName": {
            "type": "string",
            "description": "The user's first name"
          },
          "lastName": {
            "type": "string",
            "description": "The user's last name"
          },
          "email": {
            "type": "string",
            "description": "The user's email address"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The user's phone number"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The unique ID of the user"
          },
          "firstName": {
            "type": "string",
            "description": "The user's first name"
          },
          "lastName": {
            "type": "string",
            "description": "The user's last name"
          },
          "email": {
            "type": "string",
            "description": "The user's email address"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The user's phone number"
          },
          "profilePictureURL": {
            "type": "string",
            "description": "The user's profile picture URL"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The user's roles"
          },
          "idTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The user's idTags"
          }
        }
      },
      "UserUpdateRequest": {
        "type": "object",
        "required": [
          "firstName",
          "lastName",
          "email"
        ],
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ValueFormat": {
        "type": "string",
        "enum": [
          "Raw",
          "SignedData"
        ]
      },
      "VehicleDto": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "vehicleModelId": {
            "$ref": "#/components/schemas/UUID"
          },
          "licensePlate": {
            "type": "string"
          }
        }
      },
      "VehicleModelDto": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "modelId": {
            "type": "string"
          },
          "batteryCapacityFull": {
            "type": "number",
            "format": "double"
          },
          "chargeAlternativePhase": {
            "type": "integer",
            "format": "int32"
          },
          "chargeAlternativePhaseAmp": {
            "type": "integer",
            "format": "int32"
          },
          "chargeAlternativePower": {
            "type": "integer",
            "format": "int32"
          },
          "chargeOptionPhase": {
            "type": "integer",
            "format": "int32"
          },
          "chargeOptionPhaseAmp": {
            "type": "integer",
            "format": "int32"
          },
          "chargeOptionPower": {
            "type": "integer",
            "format": "int32"
          },
          "chargePlug": {
            "type": "string"
          },
          "chargeStandardPhaseAmp": {
            "type": "integer",
            "format": "int32"
          },
          "chargeStandardPower": {
            "type": "integer",
            "format": "int32"
          },
          "drivetrainPowerHP": {
            "type": "integer",
            "format": "int32"
          },
          "efficiencyReal": {
            "type": "number",
            "format": "double"
          },
          "fastChargePlug": {
            "type": "string"
          },
          "fastChargePowerMax": {
            "type": "integer",
            "format": "int32"
          },
          "imageUrl": {
            "type": "string"
          },
          "performanceAcceleration": {
            "type": "number",
            "format": "double"
          },
          "performanceTopSpeed": {
            "type": "integer",
            "format": "int32"
          },
          "rangeReal": {
            "type": "integer",
            "format": "int32"
          },
          "rangeWLTP": {
            "type": "integer",
            "format": "int32"
          },
          "vehicleMake": {
            "type": "string"
          },
          "vehicleModel": {
            "type": "string"
          },
          "vehicleModelVersion": {
            "type": "string"
          },
          "isAutoChargeCapable": {
            "type": "boolean"
          },
          "mimeType": {
            "type": "string"
          }
        }
      },
      "VehicleModelFullRequest": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "format": "binary",
            "description": "Image to upload"
          },
          "metadata": {
            "$ref": "#/components/schemas/VehicleModelJsonRequest"
          }
        }
      },
      "VehicleModelJsonRequest": {
        "type": "object",
        "properties": {
          "modelId": {
            "type": "string"
          },
          "batteryCapacityFull": {
            "type": "number",
            "format": "double"
          },
          "chargeAlternativePhase": {
            "type": "integer",
            "format": "int32"
          },
          "chargeAlternativePhaseAmp": {
            "type": "integer",
            "format": "int32"
          },
          "chargeAlternativePower": {
            "type": "integer",
            "format": "int32"
          },
          "chargeOptionPhase": {
            "type": "integer",
            "format": "int32"
          },
          "chargeOptionPhaseAmp": {
            "type": "integer",
            "format": "int32"
          },
          "chargeOptionPower": {
            "type": "integer",
            "format": "int32"
          },
          "chargePlug": {
            "type": "string"
          },
          "chargeStandardPhaseAmp": {
            "type": "integer",
            "format": "int32"
          },
          "chargeStandardPower": {
            "type": "integer",
            "format": "int32"
          },
          "drivetrainPowerHP": {
            "type": "integer",
            "format": "int32"
          },
          "efficiencyReal": {
            "type": "number",
            "format": "double"
          },
          "fastChargePlug": {
            "type": "string"
          },
          "fastChargePowerMax": {
            "type": "integer",
            "format": "int32"
          },
          "performanceAcceleration": {
            "type": "number",
            "format": "double"
          },
          "performanceTopSpeed": {
            "type": "integer",
            "format": "int32"
          },
          "rangeReal": {
            "type": "integer",
            "format": "int32"
          },
          "rangeWLTP": {
            "type": "integer",
            "format": "int32"
          },
          "vehicleMake": {
            "type": "string"
          },
          "vehicleModel": {
            "type": "string"
          },
          "vehicleModelVersion": {
            "type": "string"
          },
          "isAutoChargeCapable": {
            "type": "boolean"
          }
        }
      },
      "VehicleModelListDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "pageCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VehicleModelDto"
            }
          }
        }
      },
      "WalletCpoRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "balance": {
            "type": "number"
          },
          "token": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "WalletRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "balance": {
            "type": "number"
          },
          "user_id": {
            "$ref": "#/components/schemas/UUID"
          },
          "location": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "WalletResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "balance": {
            "type": "number"
          },
          "token": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "WalletResponseFake": {
        "type": "object",
        "properties": {
          "walletId": {
            "$ref": "#/components/schemas/UUID"
          },
          "locationId": {
            "type": "string"
          },
          "balance": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          }
        }
      },
      "ZonedDateTime": {
        "type": "string",
        "format": "date-time",
        "examples": [
          "2022-03-10T12:15:50-04:00"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Authentication Resource",
      "description": "Gateway API to handle Keycloak token operations"
    },
    {
      "name": "CPO Logs Resource",
      "description": "API to handle CPO logs operations"
    },
    {
      "name": "ChargingStation Resource",
      "description": "Gateway API to handle ChargingStation operations"
    },
    {
      "name": "Commands Resource",
      "description": "API to handle Command operations"
    },
    {
      "name": "Connector Resource",
      "description": "Gateway API to handle Connector operations"
    },
    {
      "name": "ConnectorModel Resource",
      "description": "API to handle ConnectorModel operations"
    },
    {
      "name": "ConnectorModelInstance Resource",
      "description": "API to handle ConnectorModelInstance operations"
    },
    {
      "name": "IdTag Resource",
      "description": "API to handle IdTag operations"
    },
    {
      "name": "Location Resource",
      "description": "Gateway API to handle Location operations"
    },
    {
      "name": "Notification Resource",
      "description": "API to handle Notification operations"
    },
    {
      "name": "SMS Resource",
      "description": "API to handle SMS operations"
    },
    {
      "name": "StationModel Resource",
      "description": "API to handle StationModel operations"
    },
    {
      "name": "Tariff Resource",
      "description": "Gateway API to handle Tariff operations"
    },
    {
      "name": "Transaction Resource",
      "description": "API to handle CPO logs operations"
    },
    {
      "name": "User Resource",
      "description": "Gateway API to handle Keycloak user operations"
    },
    {
      "name": "UserCar Resource",
      "description": "API to handle UserCar operations"
    },
    {
      "name": "Vehicle Resource",
      "description": "API to handle Vehicle operations"
    },
    {
      "name": "VehicleModel Resource",
      "description": "API to handle VehicleModel operations"
    },
    {
      "name": "Wallets Resource",
      "description": "API to handle Wallets operations"
    }
  ],
  "paths": {
    "/emsp/api/v1/auth/otp": {
      "post": {
        "summary": "Send OTP to user via SMS",
        "description": "Generates a time based OTP and sends it to user via SMS.",
        "tags": [
          "Authentication Resource"
        ],
        "parameters": [
          {
            "name": "forced_phone_number",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully authenticated and tokens generated."
          },
          "400": {
            "description": "Bad Request - Missing or invalid parameters.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/emsp/api/v1/auth/otp/{otp_value}": {
      "post": {
        "summary": "",
        "description": "",
        "tags": [
          "Authentication Resource"
        ],
        "parameters": [
          {
            "name": "otp_value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully authenticated and tokens generated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing or invalid parameters.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/emsp/api/v1/auth/refresh": {
      "post": {
        "summary": "Refresh Token Pair",
        "description": "Refreshes new token pair.",
        "tags": [
          "Authentication Resource"
        ],
        "parameters": [
          {
            "name": "X-Access-Token",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Refresh-Token",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully refreshed token pair.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unauthorized",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/emsp/api/v1/chargingstation": {
      "get": {
        "summary": "Get all charging stations",
        "description": "Retrieves all charging stations, including their availability and current status.",
        "tags": [
          "ChargingStation Resource"
        ],
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LocalDateTime"
                },
                {
                  "default": "1500-01-01T00:00:00"
                }
              ]
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LocalDateTime"
                },
                {
                  "default": "9500-01-01T00:00:00"
                }
              ]
            }
          },
          {
            "description": "Arbitrary filter parameters.",
            "explode": true,
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form"
          },
          {
            "name": "location_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of charging stations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetChargingStationsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to view the status.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/chargingstation/authorize": {
      "post": {
        "summary": "Authorize idTag",
        "description": "Validates an idTag to authorize a charging session.",
        "tags": [
          "ChargingStation Resource"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Authorization successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing or invalid parameters.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing Bearer token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - idTag is blocked or invalid.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/chargingstation/connectorUid={connectorUid}": {
      "get": {
        "summary": "Get Charging Station details",
        "description": "Retrieves the details of a specified charging station using Connector uid. Token authentication is required.",
        "tags": [
          "ChargingStation Resource"
        ],
        "parameters": [
          {
            "name": "connectorUid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Station details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetChargingStationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Charging station not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/chargingstation/status": {
      "get": {
        "summary": "Get Charging Station Status",
        "description": "Retrieves the status of a specified charging station using Location and Station ids. Token authentication is required.",
        "tags": [
          "ChargingStation Resource"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the charging station status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CacheEVSEConnectors"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Charging station not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/chargingstation/{connectorUid}/start-transaction/{idTag}": {
      "put": {
        "summary": "Start Transaction using idTag",
        "description": "Starts a new charging session using the provided idTag from the charging station. Requires mutual TLS authentication via client certificates.",
        "tags": [
          "ChargingStation Resource"
        ],
        "parameters": [
          {
            "name": "connectorUid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          {
            "name": "idTag",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction started successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartTransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request data or missing parameters.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing client certificate.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Provided idTag is unauthorized or blocked.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Charging station or connector was not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/chargingstation/{connectorUid}/stop-transaction": {
      "put": {
        "summary": "Stop a charging session using idTag",
        "description": "Ends a charging session by using the provided idTag. The session will be authenticated via mutual TLS using client certificates.",
        "tags": [
          "ChargingStation Resource"
        ],
        "parameters": [
          {
            "name": "connectorUid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopTransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Charging session stopped successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StopTransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request data or missing parameters.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing client certificate.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Provided idTag is unauthorized or blocked.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Transaction not found or invalid idTag.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/chargingstation/{locationId}/{stationId}": {
      "put": {
        "summary": "Put Charging Station details",
        "description": "Adds a charging station using Location ids. Token authentication is required.",
        "tags": [
          "ChargingStation Resource"
        ],
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargingStationExtension"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Station details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetChargingStationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Charging station not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/chargingstation/{stationId}": {
      "get": {
        "summary": "Get Charging Station details",
        "description": "Retrieves the details of a specified charging station using Station id. Token authentication is required.",
        "tags": [
          "ChargingStation Resource"
        ],
        "parameters": [
          {
            "name": "stationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Station details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetChargingStationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Charging station not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/chargingstation/{stationId}/transaction/history": {
      "get": {
        "summary": "Get the transaction history of the station",
        "description": "Retrieves a list of history of transactions started at the ChargingStation with the provided station id.",
        "tags": [
          "ChargingStation Resource"
        ],
        "parameters": [
          {
            "name": "stationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the transaction history.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStationTransactionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "Not Found - Location not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/chargingstation/{stationName}/status": {
      "get": {
        "summary": "Get Charging Station Status",
        "description": "Retrieves the status of a specified charging station using Station id. Token authentication is required.",
        "tags": [
          "ChargingStation Resource"
        ],
        "parameters": [
          {
            "name": "stationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the charging station status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CacheEVSEConnectors"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Charging station not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/command/{stationName}/cancel-reservation": {
      "put": {
        "summary": "Cancel a reservation at a charging station",
        "description": "Cancels an existing reservation at the specified charging station",
        "tags": [
          "Commands Resource"
        ],
        "parameters": [
          {
            "name": "stationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsCancelReservationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsCancelReservationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/command/{stationName}/change-availability": {
      "put": {
        "summary": "Change availability of a charging station",
        "description": "Updates the availability status of the specified charging station",
        "tags": [
          "Commands Resource"
        ],
        "parameters": [
          {
            "name": "stationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsChangeAvailabilityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsChangeAvailabilityResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/command/{stationName}/change-configuration": {
      "put": {
        "summary": "Change configuration of a charging station",
        "description": "Updates configuration parameters for the specified charging station",
        "tags": [
          "Commands Resource"
        ],
        "parameters": [
          {
            "name": "stationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsChangeConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsChangeConfigurationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/command/{stationName}/clear-cache": {
      "put": {
        "summary": "Clear cache of a charging station",
        "description": "Instructs the specified charging station to clear its local cache",
        "tags": [
          "Commands Resource"
        ],
        "parameters": [
          {
            "name": "stationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsClearCacheRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsClearCacheResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/command/{stationName}/clear-charging-profile": {
      "put": {
        "summary": "Clear charging profile of a station",
        "description": "Removes charging profiles from the specified charging station",
        "tags": [
          "Commands Resource"
        ],
        "parameters": [
          {
            "name": "stationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsClearChargingProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsClearChargingProfileResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/command/{stationName}/data-transfer": {
      "put": {
        "summary": "Transfer data to a charging station",
        "description": "Sends custom data to the specified charging station",
        "tags": [
          "Commands Resource"
        ],
        "parameters": [
          {
            "name": "stationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsDataTransferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsDataTransferResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/command/{stationName}/get-composite-schedule": {
      "put": {
        "summary": "Get composite schedule from a charging station",
        "description": "Retrieves the composite charging schedule from the specified station",
        "tags": [
          "Commands Resource"
        ],
        "parameters": [
          {
            "name": "stationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsGetCompositeScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsGetCompositeScheduleResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/command/{stationName}/get-configuration": {
      "put": {
        "summary": "Get configuration from a charging station",
        "description": "Retrieves configuration parameters from the specified charging station",
        "tags": [
          "Commands Resource"
        ],
        "parameters": [
          {
            "name": "stationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsGetConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsGetConfigurationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/command/{stationName}/get-diagnostics": {
      "put": {
        "summary": "Get diagnostics from a charging station",
        "description": "Retrieves diagnostic information from the specified charging station",
        "tags": [
          "Commands Resource"
        ],
        "parameters": [
          {
            "name": "stationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsGetDiagnosticsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsGetDiagnosticsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/command/{stationName}/get-local-list-version": {
      "put": {
        "summary": "Get local list version from a charging station",
        "description": "Retrieves the version of the local authorization list from the specified station",
        "tags": [
          "Commands Resource"
        ],
        "parameters": [
          {
            "name": "stationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsGetLocalListVersionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsGetLocalListVersionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/command/{stationName}/reserve-now": {
      "put": {
        "summary": "Reserve a charging station",
        "description": "Creates a new reservation at the specified charging station",
        "tags": [
          "Commands Resource"
        ],
        "parameters": [
          {
            "name": "stationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsReserveNowRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsReserveNowResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/command/{stationName}/reset": {
      "put": {
        "summary": "Reset a charging station",
        "description": "Instructs the specified charging station to perform a reset operation",
        "tags": [
          "Commands Resource"
        ],
        "parameters": [
          {
            "name": "stationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsResetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsResetResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/command/{stationName}/send-local-list": {
      "put": {
        "summary": "Send local list to a charging station",
        "description": "Updates the local authorization list on the specified charging station",
        "tags": [
          "Commands Resource"
        ],
        "parameters": [
          {
            "name": "stationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsSendLocalListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsSendLocalListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/command/{stationName}/set-charging-profile": {
      "put": {
        "summary": "Set charging profile for a station",
        "description": "Configures a charging profile on the specified charging station",
        "tags": [
          "Commands Resource"
        ],
        "parameters": [
          {
            "name": "stationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsSetChargingProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsSetChargingProfileResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/command/{stationName}/trigger-message": {
      "put": {
        "summary": "Trigger a message from a charging station",
        "description": "Requests the specified charging station to send a specific message",
        "tags": [
          "Commands Resource"
        ],
        "parameters": [
          {
            "name": "stationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsTriggerMessageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsTriggerMessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/command/{stationName}/unlock-connector": {
      "put": {
        "summary": "Unlock connector of a charging station",
        "description": "Remotely unlocks a connector on the specified charging station",
        "tags": [
          "Commands Resource"
        ],
        "parameters": [
          {
            "name": "stationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsUnlockConnectorRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsUnlockConnectorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/command/{stationName}/update-firmware": {
      "put": {
        "summary": "Update firmware of a charging station",
        "description": "Initiates a firmware update process on the specified charging station",
        "tags": [
          "Commands Resource"
        ],
        "parameters": [
          {
            "name": "stationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CsmsUpdateFirmwareRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsUpdateFirmwareResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/connector": {
      "get": {
        "summary": "Get all connectors",
        "description": "Retrieves all connectors, including their availability and current status.",
        "tags": [
          "Connector Resource"
        ],
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LocalDateTime"
                },
                {
                  "default": "1500-01-01T00:00:00"
                }
              ]
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LocalDateTime"
                },
                {
                  "default": "9500-01-01T00:00:00"
                }
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of connectors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedConnectorsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/connector-model-instances": {
      "put": {
        "summary": "Update ConnectorModelInstance information by ID",
        "description": "Updates the ConnectorModelInstance information based on the provided ID and updated data.",
        "tags": [
          "ConnectorModelInstance Resource"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorModelInstanceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "ConnectorModelInstance updated successfully, no content returned"
          },
          "400": {
            "description": "Bad Request - Missing or invalid fields",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "ConnectorModelInstance not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update ConnectorModelInstance information by ID",
        "description": "Updates the ConnectorModelInstance information based on the provided ID and updated data.",
        "tags": [
          "ConnectorModelInstance Resource"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorModelInstanceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "ConnectorModelInstance updated successfully, no content returned"
          },
          "400": {
            "description": "Bad Request - Missing or invalid fields",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "ConnectorModelInstance not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "get": {
        "summary": "Get all ConnectorModelInstances",
        "description": "Retrieves all of the ConnectorModelInstance details.",
        "tags": [
          "ConnectorModelInstance Resource"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of ConnectorModelInstances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorModelInstanceListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a new ConnectorModelInstance",
        "description": "Creates a new ConnectorModelInstance with the provided details.",
        "tags": [
          "ConnectorModelInstance Resource"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorModelInstanceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "ConnectorModelInstance created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorModelInstanceDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing or invalid fields",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/connector-model-instances/{id}": {
      "get": {
        "summary": "Get ConnectorModelInstance by ID",
        "description": "Retrieves a ConnectorModelInstance based on the provided ID.",
        "tags": [
          "ConnectorModelInstance Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the ConnectorModelInstance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorModelInstanceExtension"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "ConnectorModelInstance not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete ConnectorModelInstance by ID",
        "description": "Deletes a ConnectorModelInstance from the system based on the provided ID.",
        "tags": [
          "ConnectorModelInstance Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "ConnectorModelInstance deleted successfully, no content returned"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "ConnectorModelInstance not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/connector-models": {
      "put": {
        "summary": "Update ConnectorModel information by ID",
        "description": "Updates the ConnectorModel information based on the provided ID and updated data.",
        "tags": [
          "ConnectorModel Resource"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorModelFullRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "ConnectorModel updated successfully, no content returned"
          },
          "400": {
            "description": "Bad Request - Missing or invalid fields",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "ConnectorModel not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update ConnectorModel information by ID",
        "description": "Updates the ConnectorModel information based on the provided ID and updated data.",
        "tags": [
          "ConnectorModel Resource"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorModelFullRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "ConnectorModel updated successfully, no content returned"
          },
          "400": {
            "description": "Bad Request - Missing or invalid fields",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "ConnectorModel not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "get": {
        "summary": "Get all ConnectorModels",
        "description": "Retrieves all of the ConnectorModel details.",
        "tags": [
          "ConnectorModel Resource"
        ],
        "parameters": [
          {
            "description": "Arbitrary filter parameters.",
            "explode": true,
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of ConnectorModels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorModelListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a new ConnectorModel",
        "description": "Creates a new ConnectorModel with the provided details.",
        "tags": [
          "ConnectorModel Resource"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorModelFullRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "ConnectorModel created successfully",
            "content": {
              "application/json": {
                
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing or invalid fields",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/connector-models/{id}": {
      "get": {
        "summary": "Get ConnectorModel by ID",
        "description": "Retrieves a ConnectorModel based on the provided ID.",
        "tags": [
          "ConnectorModel Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the ConnectorModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorModelDto"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "ConnectorModel not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete ConnectorModel by ID",
        "description": "Deletes a ConnectorModel from the system based on the provided ID.",
        "tags": [
          "ConnectorModel Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "ConnectorModel deleted successfully, no content returned"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "ConnectorModel not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/connector/{connectorUid}": {
      "get": {
        "summary": "Get Charging Connector details",
        "description": "Retrieves the details of a specified charging connector using its Id. Token authentication is required.",
        "tags": [
          "Connector Resource"
        ],
        "parameters": [
          {
            "name": "connectorUid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Connector details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConnectorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Charging connector not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/connector/{connectorUid}/status": {
      "get": {
        "summary": "Get Charging Connector Status",
        "description": "Retrieves the status of a specified charging connector using Location, Station and Connector's ids. Token authentication is required.",
        "tags": [
          "Connector Resource"
        ],
        "parameters": [
          {
            "name": "connectorUid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the charging connector status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CacheEVSEConnector"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Charging connector not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/connector/{locationId}/{stationId}/{connectorId}": {
      "put": {
        "summary": "Put Charging Connector details",
        "description": "Adds a specified charging connector using Location, Station ids. Token authentication is required.",
        "tags": [
          "Connector Resource"
        ],
        "parameters": [
          {
            "name": "connectorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Connector"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Connector details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConnectorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Charging connector not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/cpo-logs": {
      "get": {
        "summary": "List all logs for provided location and station",
        "description": "Retrieves a list of all logs in the provided location and station.",
        "tags": [
          "CPO Logs Resource"
        ],
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LocalDateTime"
                },
                {
                  "default": "1500-01-01T00:00:00"
                }
              ]
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LocalDateTime"
                },
                {
                  "default": "9500-01-01T00:00:00"
                }
              ]
            }
          },
          {
            "name": "evse_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedLogsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/idtag": {
      "get": {
        "summary": "List all idTags",
        "description": "Retrieves a list of all idTags in the system.",
        "tags": [
          "IdTag Resource"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all idTags.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/idtag/{idTag}": {
      "patch": {
        "summary": "Update the status and expiration of an existing idTag",
        "description": "Updates the status (active, blocked, expired) and the expiration date of an existing idTag.",
        "tags": [
          "IdTag Resource"
        ],
        "parameters": [
          {
            "name": "idTag",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIdTagRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "idTag successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateIdTagResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request data or missing parameters.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to update idTag.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified idTag does not exist.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a specific idTag",
        "description": "Deletes the specified idTag from the system.",
        "tags": [
          "IdTag Resource"
        ],
        "parameters": [
          {
            "name": "idTag",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - The idTag has been successfully deleted."
          },
          "400": {
            "description": "Bad Request - Invalid request or missing parameters.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "Not Found - The specified idTag was not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/location": {
      "get": {
        "summary": "Get all Locations",
        "description": "Retrieves all locations, including their availability and current status.",
        "tags": [
          "Location Resource"
        ],
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LocalDateTime"
                },
                {
                  "default": "1500-01-01T00:00:00"
                }
              ]
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LocalDateTime"
                },
                {
                  "default": "9500-01-01T00:00:00"
                }
              ]
            }
          },
          {
            "description": "Arbitrary filter parameters.",
            "explode": true,
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of locations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaginatedLocationsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/location/dashboard": {
      "get": {
        "summary": "",
        "description": "",
        "tags": [
          "Location Resource"
        ],
        "parameters": [
          {
            "name": "income_period_type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/IncomePeriodType"
            }
          },
          {
            "name": "kwh_period_type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/KwhPeriodType"
            }
          },
          {
            "name": "location_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved dashboard",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDashboardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/location/{locationId}": {
      "put": {
        "summary": "Put Charging Location details",
        "description": "Adds a location. Token authentication is required.",
        "tags": [
          "Location Resource"
        ],
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/LocationFullRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Location details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Charging location not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "get": {
        "summary": "Get Charging Location details",
        "description": "Retrieves the details of a specified charging location using its name. Token authentication is required.",
        "tags": [
          "Location Resource"
        ],
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Charging location not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a charging location",
        "description": "Deletes a charging location. Token authentication is required.",
        "tags": [
          "Location Resource"
        ],
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the charging location.",
            "content": {
              "application/json": {
                
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Charging location not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/location/{location_id}/relation": {
      "get": {
        "summary": "Checks if the current user is registered to a location",
        "description": "Retrieves true/false depending on if the current user is registered to a location.",
        "tags": [
          "Location Resource"
        ],
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationUserRelationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "Not Found - Location not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/location/{location_id}/relation/{userId}": {
      "delete": {
        "summary": "Remove the current user from a location",
        "description": "Retrieves a true/false value based on if the operation was successful.",
        "tags": [
          "Location Resource"
        ],
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed to the locations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteLocationUserRelationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "Not Found - Location not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "put": {
        "summary": "Register the current user to a location",
        "description": "Retrieves a true/false value based on if the operation was successful.",
        "tags": [
          "Location Resource"
        ],
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully registered to the locations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutLocationUserRelationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "Not Found - Location not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/location/{location_id}/transaction/history": {
      "get": {
        "summary": "Get the transaction history of the location",
        "description": "Retrieves a list of history of transactions started at the Location with the provided location id.",
        "tags": [
          "Location Resource"
        ],
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the transaction history.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationTransactionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "Not Found - Location not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/location/{location_id}/users": {
      "get": {
        "summary": "Get users of location",
        "description": "Retrieves the users that are registered to the location with provided Id.",
        "tags": [
          "Location Resource"
        ],
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved users of location.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationUsersResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "Not Found - Location not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/notification": {
      "post": {
        "summary": "Create a new Notification",
        "description": "Creates a new Notification with the provided details",
        "tags": [
          "Notification Resource"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notification created successfully"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/notification/notify-admins": {
      "post": {
        "summary": "Create Notifications for admins of a location",
        "description": "Creates Notifications with the provided details for the admins of the provided location",
        "tags": [
          "Notification Resource"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotifyAdminsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notifications created successfully"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/notification/user": {
      "get": {
        "summary": "Get Notifications by User ID",
        "description": "Retrieves all notifications for a specific user.",
        "tags": [
          "Notification Resource"
        ],
        "responses": {
          "200": {
            "description": "List of Notifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/notification/user/after/{date_time}": {
      "get": {
        "summary": "Get Notifications After Date/Time",
        "description": "Retrieves all notifications created after the specified date and time.",
        "tags": [
          "Notification Resource"
        ],
        "parameters": [
          {
            "name": "date_time",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LocalDateTime"
            }
          },
          {
            "name": "use_alternative",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Notifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/notification/user/before/{date_time}": {
      "get": {
        "summary": "Get Notifications Before Date/Time",
        "description": "Retrieves all notifications created before the specified date and time.",
        "tags": [
          "Notification Resource"
        ],
        "parameters": [
          {
            "name": "date_time",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LocalDateTime"
            }
          },
          {
            "name": "use_alternative",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Notifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/notification/user/read": {
      "get": {
        "summary": "Get Read Notifications",
        "description": "Retrieves all notifications that have been read.",
        "tags": [
          "Notification Resource"
        ],
        "responses": {
          "200": {
            "description": "List of Read Notifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/notification/user/unread/{location_id}": {
      "get": {
        "summary": "Get Unread Notifications",
        "description": "Retrieves all notifications that have not been read.",
        "tags": [
          "Notification Resource"
        ],
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Unread Notifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/notification/user/unread/{location_id}/count": {
      "get": {
        "summary": "Get count of Unread Notifications",
        "description": "Retrieves the count of notifications that have not been read.",
        "tags": [
          "Notification Resource"
        ],
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Count of Unread Notifications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/notification/user/{location_id}mark-all-read": {
      "patch": {
        "summary": "Mark All User Notifications as Read",
        "description": "Marks all notifications for a specific user as read",
        "tags": [
          "Notification Resource"
        ],
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Notifications marked as read successfully"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/notification/{id}": {
      "get": {
        "summary": "Get Notification by ID",
        "description": "Retrieves a Notification based on the provided ID.",
        "tags": [
          "Notification Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationDto"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "Notification not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/notification/{id}/mark-read": {
      "patch": {
        "summary": "Mark Notification as Read",
        "description": "Marks a specific notification as read",
        "tags": [
          "Notification Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Notification marked as read successfully"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Forbidden - Notification does not belong to current user",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Notification not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/sms": {
      "post": {
        "summary": "Send an SMS",
        "description": "Sends an SMS with the provided content to the specified recipient(s).",
        "tags": [
          "SMS Resource"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmsSendRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "SMS sent successfully"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/station-models": {
      "put": {
        "summary": "Update StationModel",
        "description": "Creates or updates an StationModel based on the provided details.",
        "tags": [
          "StationModel Resource"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/StationModelFullRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "StationModel updated successfully",
            "content": {
              "application/json": {
                
              }
            }
          },
          "400": {
            "description": "Bad Request - Could not upsert StationModel",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "Not Found - Could not found StationModel",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "get": {
        "summary": "Get all StationModels",
        "description": "Retrieves all StationModels with pagination support.",
        "tags": [
          "StationModel Resource"
        ],
        "parameters": [
          {
            "description": "Arbitrary filter parameters.",
            "explode": true,
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of StationModels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StationModelListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a new StationModel",
        "description": "Creates an StationModel based on the provided details.",
        "tags": [
          "StationModel Resource"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/StationModelFullRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "StationModel updated successfully",
            "content": {
              "application/json": {
                
              }
            }
          },
          "400": {
            "description": "Bad Request - Could not upsert StationModel",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "409": {
            "description": "Conflict - StationModel already exists",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/station-models/{id}": {
      "get": {
        "summary": "Get StationModel by ID",
        "description": "Retrieves an StationModel based on the provided ID.",
        "tags": [
          "StationModel Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the StationModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StationModelDto"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "StationModel not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete StationModel by ID",
        "description": "Deletes an StationModel based on the provided ID.",
        "tags": [
          "StationModel Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "StationModel deleted successfully, no content returned"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "StationModel not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/tariff": {
      "put": {
        "summary": "Put Tariff details",
        "description": "Adds a Tariff. Token authentication is required.",
        "tags": [
          "Tariff Resource"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutTariffRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Tariff details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TariffDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Tariff not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "get": {
        "summary": "Get all tariffs",
        "description": "Retrieves all tariffs.",
        "tags": [
          "Tariff Resource"
        ],
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LocalDateTime"
                },
                {
                  "default": "1500-01-01T00:00:00"
                }
              ]
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LocalDateTime"
                },
                {
                  "default": "9500-01-01T00:00:00"
                }
              ]
            }
          },
          {
            "description": "Arbitrary filter parameters.",
            "explode": true,
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tariffs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaginatedTariffsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete Tariff",
        "description": "Deletes a specified Tariff.",
        "tags": [
          "Tariff Resource"
        ],
        "parameters": [
          {
            "name": "tariff_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Tariff deleted successfully, no content returned",
            "content": {
              "application/json": {
                
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Tariff not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/tariff/connector_uid={connector_uid}/tariff_id={tariff_id}": {
      "put": {
        "summary": "Set Connector Active Tariff",
        "description": "Sets the active tariff for a specific connector. Token authentication is required.",
        "tags": [
          "Tariff Resource"
        ],
        "parameters": [
          {
            "name": "connector_uid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          {
            "name": "tariff_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Connector tariff set successfully, no content returned",
            "content": {
              "application/json": {
                
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Connector or Tariff not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/tariff/{tariff_id}": {
      "get": {
        "summary": "Get Tariff details",
        "description": "Retrieves the details of a specified Tariff using its id. Token authentication is required.",
        "tags": [
          "Tariff Resource"
        ],
        "parameters": [
          {
            "name": "tariff_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tariff details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TariffDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Tariff not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/transaction": {
      "get": {
        "summary": "Get user transactions",
        "description": "Retrieves active transactions for the current user based on their role and access permissions. SuperAdmins can see all transactions, location Admins can see location transactions, and regular users can only see their own active transactions.",
        "tags": [
          "Transaction Resource"
        ],
        "parameters": [
          {
            "name": "connector_id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "evse_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "location_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "meter_start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "meter_stop",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "reason",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ReasonEnum"
            }
          },
          {
            "name": "reservation_id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "start_id_tag",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stop_id_tag",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timestamp_start",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/LocalDate"
            }
          },
          {
            "name": "timestamp_stop",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/LocalDate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transactions based on user permissions. Returns paginated transaction history with transaction details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaginatedUserTransactionHistoryResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/user": {
      "post": {
        "summary": "Create a new user",
        "description": "Creates a new user with the provided details.",
        "tags": [
          "User Resource"
        ],
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing or invalid fields",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "409": {
            "description": "Conflict - User with the provided email or phone number already exists",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server error while creating user",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              "**"
            ]
          }
        ]
      },
      "get": {
        "summary": "Get all users",
        "description": "Retrieves a list of all users in the system.",
        "tags": [
          "User Resource"
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              "**"
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/user-car": {
      "patch": {
        "summary": "Update UserCar information by ID",
        "description": "Updates the UserCar information based on the provided ID and updated data.",
        "tags": [
          "UserCar Resource"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCarDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "UserCar updated successfully, no content returned"
          },
          "400": {
            "description": "Bad Request, invalid input data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "UserCar not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "get": {
        "summary": "Get current user's UserCars",
        "description": "Retrieves a list of UserCars belonging to current user.",
        "tags": [
          "UserCar Resource"
        ],
        "responses": {
          "200": {
            "description": "List of UserCars",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserCarGetResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "post": {
        "summary": "Creates a new UserCar",
        "description": "Creates a new UserCar with the provided details",
        "tags": [
          "UserCar Resource"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserCarRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "UserCar created successfully"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "409": {
            "description": "Conflict - UserCar already exists.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/user-car/favourite": {
      "get": {
        "summary": "Get UserCar favourite",
        "description": "Gets the UserCar favourite.",
        "tags": [
          "UserCar Resource"
        ],
        "responses": {
          "200": {
            "description": "UserCar found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCarGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, invalid input data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Update forbidden",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "UserCar not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/user-car/userId={userId}": {
      "get": {
        "summary": "Get UserCars by userId",
        "description": "Retrieves a list of UserCars based on the provided userId.",
        "tags": [
          "UserCar Resource"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of UserCars",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserCarGetResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/user-car/vehicleId={vehicleId}": {
      "get": {
        "summary": "Get UserCar by userId and vehicleId",
        "description": "Retrieves a UserCar based on current user's userId and provided vehicleId.",
        "tags": [
          "UserCar Resource"
        ],
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserCar found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCarGetResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "UserCar not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/user-car/{id}": {
      "delete": {
        "summary": "Delete a UserCar by ID",
        "description": "Deletes a UserCar from the system based on the provided ID.",
        "tags": [
          "UserCar Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "UserCar deleted successfully, no content returned"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "UserCar not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "get": {
        "summary": "Get UserCar by ID",
        "description": "Retrieves a UserCar based on the provided ID.",
        "tags": [
          "UserCar Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserCar found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCarGetResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "UserCar not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/user-car/{userId}": {
      "post": {
        "summary": "Creates a new UserCar",
        "description": "Creates a new UserCar with the provided details",
        "tags": [
          "UserCar Resource"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserCarRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "UserCar created successfully"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "409": {
            "description": "Conflict - UserCar already exists.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/user/current_user": {
      "get": {
        "summary": "Get a user by ID",
        "description": "Retrieves the details of a user based on the provided user ID.",
        "tags": [
          "User Resource"
        ],
        "responses": {
          "200": {
            "description": "User found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              "**"
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/user/idtags": {
      "get": {
        "summary": "Get idTags of the current user",
        "description": "Retrieves a list of all idTags of the current user.",
        "tags": [
          "User Resource"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all idTags.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              "**"
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/user/locations": {
      "get": {
        "summary": "Get locations related with the current user",
        "description": "Retrieves a list locations related with the current user.",
        "tags": [
          "User Resource"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all user-locations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "Not Found - User Locations not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              "**"
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/user/money/wallet": {
      "get": {
        "summary": "Get user wallets",
        "description": "Retrieves all wallets associated with the current user",
        "tags": [
          "User Resource"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user wallets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WalletResponseFake"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              "**"
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/user/profile-picture": {
      "post": {
        "summary": "Upload a profile picture",
        "description": "Uploads a profile picture to user",
        "tags": [
          "User Resource"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Profile picture uploaded successfully"
          },
          "400": {
            "description": "Bad Request - Missing or invalid fields",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "Not Found - User not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server error while uploading profile picture",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              "**"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete user's profile picture",
        "description": "Deletes the profile picture of the specified user",
        "tags": [
          "User Resource"
        ],
        "responses": {
          "204": {
            "description": "Profile picture deleted successfully"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "Not Found - User or profile picture not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server error while deleting profile picture",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              "**"
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/user/transaction/active": {
      "get": {
        "summary": "Get active transactions of the current user",
        "description": "Retrieves a list of active transactions started by the current user.",
        "tags": [
          "User Resource"
        ],
        "parameters": [
          {
            "name": "location_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all active transactions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserActiveTransactionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              "**"
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/user/transaction/history": {
      "get": {
        "summary": "Get the transaction history of the current user",
        "description": "Retrieves a list of history of transactions started by the current user.",
        "tags": [
          "User Resource"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the transaction history.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaginatedUserTransactionHistoryResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              "**"
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/user/transactions": {
      "get": {
        "summary": "Get all transactions",
        "description": "Retrieves a list of all transactions.",
        "tags": [
          "User Resource"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all transactions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaginatedAllTransactionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              "**"
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/user/{id}": {
      "patch": {
        "summary": "Update a user's information by ID",
        "description": "Updates the user information based on the provided user ID and updated data.",
        "tags": [
          "User Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "User updated successfully, no content returned"
          },
          "400": {
            "description": "Bad Request, invalid input data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              "**"
            ]
          }
        ]
      },
      "get": {
        "summary": "Get a user by ID",
        "description": "Retrieves the details of a user based on the provided user ID.",
        "tags": [
          "User Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              "**"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a user by ID",
        "description": "Deletes a user from the system based on the provided user ID.",
        "tags": [
          "User Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully, no content returned"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              "**"
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/user/{id}/role/leave/{roleName}": {
      "patch": {
        "summary": "Update a user's information by ID",
        "description": "Updates the user information based on the provided user ID and updated data.",
        "tags": [
          "User Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          {
            "name": "roleName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User updated successfully, no content returned"
          },
          "400": {
            "description": "Bad Request, invalid input data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              "**"
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/vehicle": {
      "patch": {
        "summary": "Update Vehicle information by ID",
        "description": "Updates the Vehicle information based on the provided ID and updated data.",
        "tags": [
          "Vehicle Resource"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Vehicle updated successfully, no content returned"
          },
          "400": {
            "description": "Bad Request, invalid input data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "Vehicle not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "post": {
        "summary": "Creates a new Vehicle",
        "description": "Creates a new Vehicle with the provided details",
        "tags": [
          "Vehicle Resource"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddVehicleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Vehicle created successfully"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "409": {
            "description": "Conflict - Vehicle already exists.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/vehicle-model": {
      "get": {
        "summary": "Get all VehicleModels",
        "description": "Retrieves all of the VehicleModel details.",
        "tags": [
          "VehicleModel Resource"
        ],
        "parameters": [
          {
            "description": "Arbitrary filter parameters.",
            "explode": true,
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of VehicleModels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleModelListDto"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a new VehicleModel",
        "description": "Creates a new VehicleModel with the provided details.",
        "tags": [
          "VehicleModel Resource"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/VehicleModelFullRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "VehicleModel created successfully"
          },
          "400": {
            "description": "Bad Request - Missing or invalid fields",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "409": {
            "description": "Conflict - VehicleModel with the provided ID already exists",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server error while creating VehicleModel",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/vehicle-model/modelId={modelId}": {
      "get": {
        "summary": "Get VehicleModel by modelId",
        "description": "Retrieves a VehicleModel based on the provided modelId.",
        "tags": [
          "VehicleModel Resource"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "VehicleModel found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleModelDto"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "VehicleModel not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/vehicle-model/{id}": {
      "patch": {
        "summary": "Update VehicleModel information by ID",
        "description": "Updates the VehicleModel information based on the provided ID and updated data.",
        "tags": [
          "VehicleModel Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/VehicleModelFullRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "VehicleModel updated successfully, no content returned"
          },
          "400": {
            "description": "Bad Request, invalid input data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "VehicleModel not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "get": {
        "summary": "Get VehicleModel by ID",
        "description": "Retrieves a VehicleModel based on the provided ID.",
        "tags": [
          "VehicleModel Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "VehicleModel found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleModelDto"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "VehicleModel not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete VehicleModel by ID",
        "description": "Deletes a VehicleModel from the system based on the provided ID.",
        "tags": [
          "VehicleModel Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "VehicleModel deleted successfully, no content returned"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "VehicleModel not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/vehicle/licensePlate={licensePlate}": {
      "get": {
        "summary": "Get Vehicle by licensePlate",
        "description": "Retrieves a Vehicle based on the provided licensePlate.",
        "tags": [
          "Vehicle Resource"
        ],
        "parameters": [
          {
            "name": "licensePlate",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicle found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleDto"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "Vehicle not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/vehicle/vehicleModelId={vehicleModelId}": {
      "get": {
        "summary": "Get Vehicles by vehicleModelId",
        "description": "Retrieves a list of Vehicles based on the provided vehicleModelId.",
        "tags": [
          "Vehicle Resource"
        ],
        "parameters": [
          {
            "name": "vehicleModelId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Vehicles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/vehicle/{id}": {
      "get": {
        "summary": "Get Vehicle by ID",
        "description": "Retrieves a Vehicle based on the provided ID.",
        "tags": [
          "Vehicle Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicle found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleDto"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "Vehicle not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a Vehicle by ID",
        "description": "Deletes a Vehicle from the system based on the provided ID.",
        "tags": [
          "Vehicle Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Vehicle deleted successfully, no content returned"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "Vehicle not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/wallets": {
      "post": {
        "summary": "Create a new wallet",
        "description": "Creates a new wallet with the provided details",
        "tags": [
          "Wallets Resource"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WalletRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsCommandResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/wallets/self": {
      "get": {
        "summary": "Get current user's wallets",
        "description": "Retrieves all wallets associated with the currently authenticated user across all locations",
        "tags": [
          "Wallets Resource"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsWalletListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/wallets/self/{id}": {
      "get": {
        "summary": "Get a specific wallet for current user",
        "description": "Retrieves a specific wallet by ID that belongs to the currently authenticated user",
        "tags": [
          "Wallets Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsWalletResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/wallets/self/{id}/transactions": {
      "get": {
        "summary": "Find transactions for current user's wallet",
        "description": "Retrieves all financial transactions for a specific wallet owned by the currently authenticated user",
        "tags": [
          "Wallets Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "amount",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/LocalDate"
            }
          },
          {
            "name": "description",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "location",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "reference_number",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TransactionStatus"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TransactionType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedMoneyTransactionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/wallets/token={token}": {
      "get": {
        "summary": "Find wallets by token across all locations",
        "description": "Retrieves all wallets associated with the specified token across all locations",
        "tags": [
          "Wallets Resource"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "balance",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "location",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsWalletListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/wallets/transactions": {
      "get": {
        "summary": "Get transactions based on user role",
        "description": "Returns transactions filtered by user role. User role gets their own transactions, Admin role gets all transactions for a location, SuperAdmin gets all transactions across all locations.",
        "tags": [
          "Wallets Resource"
        ],
        "parameters": [
          {
            "name": "amount",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/LocalDate"
            }
          },
          {
            "name": "description",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "location",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "reference_number",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TransactionStatus"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TransactionType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transactions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedMoneyTransactionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/wallets/transfer": {
      "post": {
        "summary": "Transfer funds between wallets",
        "description": "Processes a financial transaction to transfer funds between wallets",
        "tags": [
          "Wallets Resource"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoneyTransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsCommandResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/wallets/{id}/transactions": {
      "get": {
        "summary": "Find transactions for a wallet by ID",
        "description": "Retrieves all financial transactions associated with the specified wallet ID",
        "tags": [
          "Wallets Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "amount",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/LocalDate"
            }
          },
          {
            "name": "description",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "location",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reference_number",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TransactionStatus"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TransactionType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/wallets/{locationId}": {
      "get": {
        "summary": "Get paginated list of wallets for a location",
        "description": "Retrieves a paginated list of all wallets in the specified location",
        "tags": [
          "Wallets Resource"
        ],
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCsmsWalletResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/wallets/{locationId}/{id}": {
      "put": {
        "summary": "Update an existing wallet",
        "description": "Updates a wallet identified by ID in the specified location with the provided details",
        "tags": [
          "Wallets Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WalletRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsCommandResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "get": {
        "summary": "Find wallet by ID in a specific location",
        "description": "Retrieves a wallet by its ID within the specified location",
        "tags": [
          "Wallets Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsWalletResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a wallet by ID",
        "description": "Removes a wallet identified by ID from the specified location",
        "tags": [
          "Wallets Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsCommandResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/wallets/{location_id}/user": {
      "get": {
        "summary": "Find wallets for current user in a location",
        "description": "Retrieves all wallets associated with the currently authenticated user in the specified location",
        "tags": [
          "Wallets Resource"
        ],
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "balance",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "location",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsWalletListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/wallets/{location_id}/user/transactions": {
      "get": {
        "summary": "Find transactions for current user in a location",
        "description": "Retrieves all financial transactions for the currently authenticated user in the specified location with pagination support",
        "tags": [
          "Wallets Resource"
        ],
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedMoneyTransactionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/wallets/{location_id}/{id}/transactions": {
      "get": {
        "summary": "Find transactions for a wallet in a specific location",
        "description": "Retrieves all financial transactions for a wallet identified by ID within the specified location",
        "tags": [
          "Wallets Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/LocalDate"
            }
          },
          {
            "name": "description",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "location",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "reference_number",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TransactionStatus"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TransactionType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedMoneyTransactionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/wallets/{location_id}/{token}": {
      "get": {
        "summary": "Find wallets by token in a location",
        "description": "Retrieves all wallets associated with the specified token in the given location",
        "tags": [
          "Wallets Resource"
        ],
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "balance",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "location",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsmsWalletListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    },
    "/emsp/api/v1/wallets/{token}/transactions": {
      "get": {
        "summary": "Find transactions by token",
        "description": "Retrieves all financial transactions associated with the specified token with pagination support",
        "tags": [
          "Wallets Resource"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Internal Server Error - Server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway - Issue with external service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuthentication": [
              
            ]
          }
        ]
      }
    }
  }
}